<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FanYijie</title>
  
  <subtitle>范以杰的个人博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-11T11:07:47.519Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>FanYijie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈前端模块化</title>
    <link href="http://example.com/2021/01/20/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://example.com/2021/01/20/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2021-01-20T05:28:39.000Z</published>
    <updated>2021-03-11T11:07:47.519Z</updated>
    
    <content type="html"><![CDATA[<ul><li>CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。</li><li>AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li>CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM 打包，模块的加载逻辑偏重</li><li>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#requirejs  AMD前台模块化规范</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、引入模块</span><br><span class="line"><span class="built_in">require</span>([dependencies],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">    - 第一个参数是一个数组,表示所依赖的模块</span><br><span class="line"></span><br><span class="line">- 第二个参数是一个回调函数,当前面指定的模块都加载成功后,它将被调用.加载的模块会以参数形式传入该函数,从而在回调函数内部就可以使用这些模块</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、定义模块</span><br><span class="line">define(id?,dependencies?,factory);</span><br><span class="line">    - id: 定义中模块的名字;可选；如果没有提供该参数,模块的名字应该默认为模块加载器请求的指定脚本的名字.</span><br><span class="line">    - 依赖dependencies：是一个当前模块依赖的,已被模块定义的模块标识的数组字面量</span><br><span class="line">    - 工厂方法factory,模块初始化要执行的函数或对象.如果为函数,它应该只被执行一次.如果是对象,此对象应该为模块的输出值.</span><br><span class="line">    - 默认情况下文件名即为模块名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#seajs   CMD前台模块化规范</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明模块</span></span><br><span class="line">define(id?,d?,factory)</span><br><span class="line"></span><br><span class="line">- id : 因为CMD推崇一个文件一个模块,所以经常就用文件名作为模块id</span><br><span class="line">- d : CMD推崇依赖就近,所以一般不在define的参数中写依赖</span><br><span class="line">- factory :函数   <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="built_in">module</span></span>)</span></span><br><span class="line"><span class="function">      <span class="title">require</span> 是一个方法,用来获取其他模块提供的接口</span></span><br><span class="line"><span class="function">      <span class="title">exports</span> 是一个对象,用来向外提供模块接口</span></span><br><span class="line"><span class="function">      <span class="title">module</span> 是一个对象,上面存储了与当前模块相关联的一些属性和方法</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//使用模块</span></span><br><span class="line"><span class="function"><span class="title">seajs</span>.<span class="title">use</span>(<span class="params"><span class="string">&#x27;mymodel.js&#x27;</span>,<span class="keyword">function</span>(mymodel)&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#commonjs   后台模块化规范</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.模块的引入</span></span><br><span class="line"><span class="keyword">const</span> modu = <span class="built_in">require</span>(‘./b.js’)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.模块的导出</span></span><br><span class="line"><span class="comment">//导出单个成员</span></span><br><span class="line"><span class="built_in">exports</span>.foo = “变量”</span><br><span class="line"><span class="built_in">exports</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出多个成员</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ES6模块化规范</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.导出</span></span><br><span class="line"><span class="comment">//导出单个成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;leo&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age= <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> name= <span class="string">&#x27;leo&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age= <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> kk = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//导出多个成员</span></span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br><span class="line"><span class="comment">//导出默认成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> kk;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.引入</span></span><br><span class="line"><span class="keyword">import</span> kk,&#123;name,age&#125; <span class="keyword">from</span> <span class="string">&#x27;a.js&#x27;</span>　</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。&lt;/li&gt;
&lt;li&gt;AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈TypeScript</title>
    <link href="http://example.com/2020/12/18/%E6%B5%85%E8%B0%88TypeScript/"/>
    <id>http://example.com/2020/12/18/%E6%B5%85%E8%B0%88TypeScript/</id>
    <published>2020-12-18T03:36:45.000Z</published>
    <updated>2021-03-11T11:07:04.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-TS简介"><a href="#1-TS简介" class="headerlink" title="1. TS简介"></a>1. TS简介</h2><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li><p>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</p></li><li><p>遵循 EcmaScript 6 标准规范</p></li><li><p>由微软开发</p></li><li><p>Angular 2 框架采用 TypeScript 编写</p></li><li><p>背后有微软和谷歌两大公司的支持</p></li><li><p>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</p></li><li><p>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系</p></li></ul><p>TypeScript 中文网：<a href="https://www.tslang.cn/">https://www.tslang.cn/</a></p><p>在线编译环境：<a href="https://www.typescriptlang.org/play">https://www.typescriptlang.org/play</a></p><h2 id="2-TS环境搭建"><a href="#2-TS环境搭建" class="headerlink" title="2. TS环境搭建"></a>2. TS环境搭建</h2><ol><li><p>打开命令行，键入npm i -g typescript 全局安装TS</p></li><li><p>继续在命令行环境下键入 tsc -init 进行初始化，<br>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</p></li><li><p>创建ts文件</p></li><li><p>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</p></li><li><p>输入node命令运行js代码</p></li></ol><h2 id="3-变量声明"><a href="#3-变量声明" class="headerlink" title="3. 变量声明"></a>3. 变量声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">- 作用域 : 全局作用域、函数作用域</span><br><span class="line">- 重复声明</span><br><span class="line">- 变量提升</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span></span><br><span class="line">- 块级作用域</span><br><span class="line">- 在同一个块中不能重复声明</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">- 声明同时必须赋值</span><br><span class="line">- 一旦声明不可改变（对象可以修改）</span><br><span class="line">- 块级作用域</span><br></pre></td></tr></table></figure><h2 id="4-基本数据类型"><a href="#4-基本数据类型" class="headerlink" title="4. 基本数据类型"></a>4. 基本数据类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> uname:<span class="built_in">string</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> nickname: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my nickname is <span class="subst">$&#123; nickname &#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123; age + <span class="number">1</span> &#125;</span> years old next month.`</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="comment">//TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span></span><br><span class="line"><span class="comment">//元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span></span><br><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [string, number];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//object类型</span></span><br><span class="line">- 允许赋任意值</span><br><span class="line">- 但是不能调用任意方法，即便它真的有</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo: <span class="built_in">object</span> = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//知道即可，用的很少，没有类型校验和语法提示</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Any</span></span><br><span class="line"><span class="comment">//有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notSure: any = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&quot;maybe a string instead&quot;</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// okay, definitely a boolean</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Void 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Null 和 Undefined</span></span><br><span class="line"><span class="comment">// Not much else we can assign to these variables!</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//never</span></span><br><span class="line"><span class="built_in">never</span> 是其它类型（包括 <span class="literal">null</span> 和 <span class="literal">undefined</span>）的子类型，代表从不会出现的值。</span><br><span class="line"><span class="keyword">let</span> x: <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，数字类型不能转为 never 类型</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 never类型</span></span><br><span class="line">x = (<span class="function">()=&gt;</span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;exception&#x27;</span>)&#125;)();</span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 数字类型</span></span><br><span class="line">y = (<span class="function">()=&gt;</span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;exception&#x27;</span>)&#125;)();</span><br><span class="line"><span class="comment">// 返回值为 never 的函数可以是抛出异常的情况</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型推断</span></span><br><span class="line"><span class="comment">// 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言有两种形式。 其一是“尖括号”语法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个为as语法：</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Color &#123;Red, Green, Blue&#125;;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue;</span><br><span class="line"><span class="built_in">console</span>.log(c);    <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><h2 id="5-解构赋值"><a href="#5-解构赋值" class="headerlink" title="5. 解构赋值"></a>5. 解构赋值</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组解构</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面的写法等价于：</span></span><br><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用解构赋值交换变量：</span></span><br><span class="line">[first, second] = [second, first];</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数参数解构：</span></span><br><span class="line"><span class="comment">//函数参数解构：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(first)</span><br><span class="line">  <span class="built_in">console</span>.log(second)</span><br><span class="line">&#125;</span><br><span class="line">ff([<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以忽略其它参数：</span></span><br><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//或者跳过解构：</span></span><br><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象解构</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    a: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//let &#123; a, b &#125; = o;</span></span><br><span class="line"><span class="comment">//let &#123;a, b&#125;: &#123;a: string, b: number&#125; = o;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你可以在对象里使用 ... 语法创建剩余变量：</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性解构重命名</span></span><br><span class="line"><span class="comment">//你也可以给属性以不同的名字：</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a</span>: newName1, <span class="attr">b</span>: newName2 &#125; = o;</span><br></pre></td></tr></table></figure><h2 id="6-展开操作符-…"><a href="#6-展开操作符-…" class="headerlink" title="6. 展开操作符 (…)"></a>6. 展开操作符 (…)</h2><ul><li><p>展开数组</p></li><li><p>展开对象</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr3,obj3)</span><br></pre></td></tr></table></figure><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数参数</span></span><br><span class="line"><span class="comment">//参数及返回值类型</span></span><br><span class="line"><span class="comment">//function 函数名字(参数1,参数2,参数3):函数返回值&#123;函数体&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span> = <span class="number">20</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    args.forEach((item: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        ret += item</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> add = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数类型不同：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params"><span class="built_in">string</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params"><span class="built_in">number</span></span>):<span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数数量不同：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">n1:<span class="built_in">number</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数类型顺序不同：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">n1:<span class="built_in">number</span>,s1:<span class="built_in">string</span></span>):<span class="title">void</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disp</span>(<span class="params">s:<span class="built_in">string</span>,n:<span class="built_in">number</span></span>):<span class="title">void</span></span>;</span><br></pre></td></tr></table></figure><h2 id="8-联合类型"><a href="#8-联合类型" class="headerlink" title="8. 联合类型"></a>8. 联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val:<span class="built_in">string</span>|<span class="built_in">number</span> </span><br><span class="line">val = <span class="number">12</span> </span><br><span class="line">val = <span class="string">&quot;Runoob&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr:<span class="built_in">number</span>[]|<span class="built_in">string</span>[]; </span><br><span class="line"><span class="keyword">var</span> i:<span class="built_in">number</span>; </span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>] </span><br><span class="line">arr = [<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="9-类"><a href="#9-类" class="headerlink" title="9. 类"></a>9. 类</h2><h4 id="9-1-类的基本使用"><a href="#9-1-类的基本使用" class="headerlink" title="9.1 类的基本使用"></a>9.1 类的基本使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zs: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h4 id="9-2-super关键字的使用"><a href="#9-2-super关键字的使用" class="headerlink" title="9.2 super关键字的使用"></a>9.2 super关键字的使用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是一个更复杂的例子：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = theName; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">super</span>(name); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters = <span class="number">5</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Slithering...&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">super</span>(name); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters = <span class="number">45</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Galloping...&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">&quot;Sammy the Python&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">&quot;Tommy the Palomino&quot;</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span></span><br><span class="line"></span><br><span class="line">Slithering...</span><br><span class="line">Sammy the Python moved 5m.</span><br><span class="line">Galloping...</span><br><span class="line">Tommy the Palomino moved 34m.</span><br></pre></td></tr></table></figure><h4 id="9-3-成员修饰符"><a href="#9-3-成员修饰符" class="headerlink" title="9.3 成员修饰符"></a>9.3 成员修饰符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public 公共的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = theName; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private 私有的</span></span><br><span class="line">- 不能被外部访问，只能在类的内部访问使用</span><br><span class="line">- 私有成员不会被继承</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="string">&#x27;human&#x27;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title">constructor</span> (<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//protected 受保护的</span></span><br><span class="line">- 和 <span class="keyword">private</span> 类似，但是可以被继承</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">getElevatorPitch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="built_in">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br><span class="line"><span class="built_in">console</span>.log(howard.name); <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span></span><br></pre></td></tr></table></figure><h4 id="9-4-getter和setter"><a href="#9-4-getter和setter" class="headerlink" title="9.4 getter和setter"></a>9.4 getter和setter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    private _name:string;</span><br><span class="line"></span><br><span class="line">    <span class="title">constructor</span>(<span class="params">name: string</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value:string</span>) &#123;<span class="built_in">this</span>._name = value;&#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>() &#123;<span class="keyword">return</span> <span class="built_in">this</span>._name;&#125;</span><br><span class="line"></span><br><span class="line">    talk()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">&quot;Hi, my name is &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-5-静态成员"><a href="#9-5-静态成员" class="headerlink" title="9.5 静态成员"></a>9.5 静态成员</h4><ul><li><p>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</p></li><li><p>static 关键字</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">static</span> country = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">    <span class="comment">//京塔方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">sayhello</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();  </span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.country)  <span class="comment">//静态变量，直接通过类型来访问</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.country) <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h2 id="10-接口"><a href="#10-接口" class="headerlink" title="10. 接口"></a>10. 接口</h2><p>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。</p><p>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</p><h4 id="10-1-接口对类的规范"><a href="#10-1-接口对类的规范" class="headerlink" title="10.1 接口对类的规范"></a>10.1 接口对类的规范</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个人的接口</span></span><br><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="title">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    age = <span class="number">38</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;老师说&quot;</span>+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;学生说&quot;</span>+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-接口对对象的规范"><a href="#10-2-接口对对象的规范" class="headerlink" title="10.2 接口对对象的规范"></a>10.2 接口对对象的规范</h4><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">    head: string;</span><br><span class="line">    arm: string;</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    shape: Shape;</span><br><span class="line">    say(word: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    shape: &#123;</span><br><span class="line">        head: <span class="string">&#x27;head&#x27;</span>,</span><br><span class="line">        arm: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params">word: string</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">jack.say(<span class="string">&#x27;hi&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="10-3-接口可选属性"><a href="#10-3-接口可选属性" class="headerlink" title="10.3 接口可选属性"></a>10.3 接口可选属性</h4><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    gender: <span class="built_in">string</span>,</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Person = &#123;</span><br><span class="line">    gender: <span class="string">&#x27;Male&#x27;</span></span><br><span class="line">    <span class="comment">// 可以不赋值 age 属性，因为是可选的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-4-接口只读属性"><a href="#10-4-接口只读属性" class="headerlink" title="10.4 接口只读属性"></a>10.4 接口只读属性</h4><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name = <span class="string">&#x27;Ivan&#x27;</span> <span class="comment">// 报错: name 是只读的</span></span><br></pre></td></tr></table></figure><p>readonly vs const</p><ul><li><p>常量使用 const</p></li><li><p>对象属性使用 readonly</p></li></ul><h4 id="10-5-函数接口"><a href="#10-5-函数接口" class="headerlink" title="10.5 函数接口"></a>10.5 函数接口</h4><p>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Fn &#123;</span><br><span class="line">    (a: number, <span class="attr">b</span>: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add: Fn = <span class="function"><span class="keyword">function</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="10-6-接口继承"><a href="#10-6-接口继承" class="headerlink" title="10.6 接口继承"></a>10.6 接口继承</h4><p>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">    move(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Human <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Human = &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;move&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-命名空间"><a href="#11-命名空间" class="headerlink" title="11. 命名空间"></a>11. 命名空间</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名空间就是内部模块，目的就是解决重名问题。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//a.ts  声明命名空间</span></span><br><span class="line"><span class="comment">//TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span></span><br><span class="line"><span class="keyword">namespace</span> Utils &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">      name: <span class="built_in">string</span>;</span><br><span class="line">      age: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my.ts  使用命名空间</span></span><br><span class="line"><span class="comment">// reference 引用命名空间(可以加也可以不加)</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me: Utils.IPerson = &#123;</span><br><span class="line">  name: <span class="string">&#x27;funlee&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me); <span class="comment">// &#123;name: &#x27;funlee&#x27;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><h2 id="12-模块"><a href="#12-模块" class="headerlink" title="12. 模块"></a>12. 模块</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> str = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title = <span class="string">&quot;标题&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> title;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> title,&#123;num,str,say&#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(title,str,say)</span><br></pre></td></tr></table></figure><h2 id="13-声明文件"><a href="#13-声明文件" class="headerlink" title="13. 声明文件"></a>13. 声明文件</h2><blockquote><p>d.ts为声明文件 主要用作类型的声明.</p></blockquote><ul><li><p>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能有效果。 (使用方式：类似于命名空间)</p></li><li><p>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data.d.ts    注意：只有声明没有实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> StringFunc = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个命名空间</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> API &#123;</span><br><span class="line">  <span class="comment">//导出CurrentUser接口类型</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> CurrentUser &#123;</span><br><span class="line">    avatar?: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    title?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-作业"><a href="#14-作业" class="headerlink" title="14. 作业"></a>14. 作业</h2><p>写出下列ts代码的含义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">defineConfig</span>(<span class="params">config: IConfigFromPlugins | IConfig</span>): <span class="title">IConfigFromPlugins</span> | <span class="title">IConfig</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> OverlayFunc = <span class="function">() =&gt;</span> React.ReactNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SiderTheme = <span class="string">&#x27;light&#x27;</span> | <span class="string">&#x27;dark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span></span><br><span class="line"><span class="keyword">const</span> columns: ProColumns&lt;TableListItem&gt;[] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收&#123;content: string&#125;类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span></span><br><span class="line"><span class="keyword">const</span> LoginMessage: React.FC&lt;&#123;</span><br><span class="line">  content: <span class="built_in">string</span>;</span><br><span class="line">&#125;&gt; = <span class="function">(<span class="params">&#123; content &#125;</span>) =&gt;</span> ()</span><br><span class="line"></span><br><span class="line"><span class="comment">//type的 | 和 &amp;</span></span><br><span class="line"><span class="keyword">type</span> Env1 = <span class="string">&#x27;prod&#x27;</span> | <span class="string">&#x27;test&#x27;</span> | <span class="string">&#x27;dev&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> Env2 = <span class="string">&#x27;prod&#x27;</span> | <span class="string">&#x27;boe&#x27;</span> | <span class="string">&#x27;ppe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EnvUnion = Env1 | Env2; <span class="comment">// &#x27;prod&#x27; | &#x27;test&#x27; | &#x27;dev&#x27; | &#x27;boe&#x27; | &#x27;ppe&#x27;  取并集</span></span><br><span class="line"><span class="keyword">type</span> EnvInter = Env1 &amp; Env2; <span class="comment">// &#x27;prod&#x27;   取交集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/weixin_34376986/article/details/93167453</span></span><br><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line">                 </span><br><span class="line"><span class="comment">//判断T是不是继承U，如果是则取never类型，否则取T类型本身</span></span><br><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断T是不是继承U，如果是则取T类型，否则取never类型</span></span><br><span class="line"><span class="keyword">type</span> Extract&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</span><br><span class="line">          </span><br><span class="line"><span class="comment">//Omit 主要作用 选择T中除了K之外的其他属性          </span></span><br><span class="line"><span class="keyword">type</span> Omit&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> REACT_APP_ENV: <span class="string">&#x27;test&#x27;</span> | <span class="string">&#x27;dev&#x27;</span> | <span class="string">&#x27;pre&#x27;</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-TS简介&quot;&gt;&lt;a href=&quot;#1-TS简介&quot; class=&quot;headerlink&quot; title=&quot;1. TS简介&quot;&gt;&lt;/a&gt;1. TS简介&lt;/h2&gt;&lt;p&gt;TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vuex使用详解</title>
    <link href="http://example.com/2020/11/04/Vuex%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2020/11/04/Vuex%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-11-04T13:10:51.000Z</published>
    <updated>2021-03-11T11:04:57.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么情况下应该使用-Vuex？"><a href="#什么情况下应该使用-Vuex？" class="headerlink" title="什么情况下应该使用 Vuex？"></a>什么情况下应该使用 Vuex？</h2><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><p>如果不打算开发大型单页应用，应用够简单，最好不要使用 Vuex。一个简单的store模式就足够了。但是，如果需要构建一个中大型单页应用，就要考虑如何更好地在组件外部管理状态，Vuex 是不错的选择。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 Vue 的单页面应用中使用，需要使用Vue.use(Vuex)调用插件。将其注入到Vue根实例中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state, payload) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">addCount</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 可以包含异步操作</span></span><br><span class="line">      <span class="comment">// context 是一个与 store 实例具有相同方法和属性的 context 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注入到根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后改变状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><blockquote><p>State，Getter，Mutation，Action，Module</p></blockquote><p>Vuex 主要有四部分：</p><ol><li>state：包含了store中存储的各个状态。</li><li>getter: 类似于 Vue 中的计算属性，根据其他 getter 或 state 计算返回值。</li><li>mutation: 一组方法，是改变store中状态的执行者，只能是同步操作。</li><li>action: 一组方法，其中可以包含异步操作。</li></ol><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>Vuex 使用 state 来存储应用中需要共享的状态。为了能让 Vue 组件在 state更改后也随着更改，需要基于state 创建计算属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Counter 组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count  <span class="comment">// count 为某个状态</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>类似于 Vue 中的 计算属性（可以认为是 store 的计算属性），getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 方法接受state作为其第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h5><p>Getter 会暴露为 store.getters 对象，可以以属性的形式访问这些值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodos <span class="comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span></span><br></pre></td></tr></table></figure><p>Getter 方法也接受 state和其他getters作为前两个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  doneTodosCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodosCount <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><p>我们可以很容易地在任何组件中使用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p><h5 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h5><p>也可以通过让 getter 返回一个函数，来实现给 getter 传参。在对 store 里的数组进行查询时非常有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.getTodoById(<span class="number">2</span>) <span class="comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><blockquote><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。也就是说，前面两个都是状态值本身，</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mutations</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><blockquote><p>才是改变状态的执行者。</p></blockquote><blockquote><p>注意：mutations只能是同步地更改状态。</p></blockquote><p>Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的**事件类型 (type)<strong>和 一个</strong>回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>调用 store.commit 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="提交载荷（Payload）"><a href="#提交载荷（Payload）" class="headerlink" title="提交载荷（Payload）"></a>提交载荷（Payload）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>其中，第一个参数是state，后面的参数是向 store.commit 传入的额外的参数，即 mutation 的**载荷（payload)**。</p><p>store.commit方法的第一个参数是要发起的mutation类型名称，后面的参数均当做额外数据传入mutation定义的方法中。</p><p><strong>规范的发起mutation的方式如下</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式</span></span><br><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>，&#123;</span><br><span class="line">  amount: <span class="number">10</span>   <span class="comment">//这是额外的参数</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用对象风格的提交方式</span></span><br><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span>   <span class="comment">//这是额外的参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>额外的参数会封装进一个对象，作为第二个参数传入mutation定义的方法中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>想要<strong>异步地更改状态</strong>，就需要使用action。action并不直接改变state，而是发起mutation。</p><p>注册一个简单的 action：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。当我们在之后介绍到 Modules 时，你就知道 context 对象为什么不是 store 实例本身了。</p><p>实践中，我们会经常用到 ES2015 的 参数解构 来简化代码（特别是我们需要调用 commit 很多次的时候）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在action内部执行异步操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发起action的方法形式和发起mutation一样，只是换了个名字dispatch。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以对象形式分发Action</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">&#x27;incrementAsync&#x27;</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Actions 支持同样的载荷方式和对象方式进行分发</p></blockquote><h5 id="Action处理异步的正确使用方式"><a href="#Action处理异步的正确使用方式" class="headerlink" title="Action处理异步的正确使用方式"></a>Action处理异步的正确使用方式</h5><p>想要使用action处理异步工作很简单，只需要将异步操作放到action中执行（如上面代码中的setTimeout）。</p><p>要想在异步操作完成后继续进行相应的流程操作，有两种方式:</p><ol><li><p>store.dispatch返回相应action的执行结果，而action的处理函数返回的就是Promise，所以store.dispatch仍然返回一个Promise。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">&#x27;actionA&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在另外一个 action 中也可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">&#x27;actionA&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;someOtherMutation&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用async/await 进行组合action。代码更加简洁。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line"></span><br><span class="line">actions: &#123;</span><br><span class="line">  <span class="keyword">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">&#x27;gotData&#x27;</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> dispatch(<span class="string">&#x27;actionA&#x27;</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">&#x27;gotOtherData&#x27;</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p></blockquote><h5 id="Action与Mutation的区别"><a href="#Action与Mutation的区别" class="headerlink" title="Action与Mutation的区别"></a>Action与Mutation的区别</h5><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作，而Mutation只能且必须是同步操作。</li></ul><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><blockquote><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p></blockquote><blockquote><p>这时我们可以将 store 分割为模块（module），每个模块拥有自己的 state 、 getters 、mutations 、actions 、甚至是嵌套子模块——从上至下进行同样方式的分割。</p></blockquote><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><h5 id="嵌套子模块"><a href="#嵌套子模块" class="headerlink" title="嵌套子模块"></a>嵌套子模块</h5><p>首先创建子模块的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// products.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initial state</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  added: [],</span><br><span class="line">  checkoutStatus: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  checkoutStatus: <span class="function"><span class="params">state</span> =&gt;</span> state.checkoutStatus</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  checkout (&#123; commit, state &#125;, products) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  mutation1 (state, &#123; id &#125;) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在总模块中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> products <span class="keyword">from</span> <span class="string">&#x27;./modules/products&#x27;</span> <span class="comment">//引入子模块</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    products   <span class="comment">// 添加进模块中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="各个模块与-Vue-组件结合"><a href="#各个模块与-Vue-组件结合" class="headerlink" title="各个模块与 Vue 组件结合"></a>各个模块与 Vue 组件结合</h2><p>将state和getter结合进组件需要使用计算属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count </span><br><span class="line">      <span class="comment">// 或者 return this.$store.getter.count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将mutation和action结合进组件需要在methods中调用this.$store.commit()或者this.$store.commit():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    changeDate () &#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;change&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    changeDateAsync () &#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;changeAsync&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了简便起见，Vuex 提供了四个辅助函数方法用来方便的将这些功能结合进组件。</p><ul><li>mapState</li><li>mapGetters</li><li>mapMutations</li><li>mapActions</li></ul><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      localComputed () &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">        <span class="comment">// 使用对象展开运算符将此对象混入外部对象中</span></span><br><span class="line">      ...mapState(&#123;</span><br><span class="line">        <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">        <span class="function"><span class="title">count</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      ...mapGetters(&#123;</span><br><span class="line">        <span class="function"><span class="title">getterCount</span>(<span class="params">state, getters</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      ...mapMutations(&#123;</span><br><span class="line">          <span class="comment">// 如果想将一个属性另取一个名字，使用以下形式。注意这是写在对象中</span></span><br><span class="line">           add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为`this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">        &#125;),</span><br><span class="line">      ...mapActions(&#123;</span><br><span class="line">          add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果结合进组件之后不想改变名字，可以直接使用数组的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>为何使用展开运算符：</strong>mapState 等四个函数返回的都是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是有了对象展开运算符，我们就可以进行简化写法。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么情况下应该使用-Vuex？&quot;&gt;&lt;a href=&quot;#什么情况下应该使用-Vuex？&quot; class=&quot;headerlink&quot; title=&quot;什么情况下应该使用 Vuex？&quot;&gt;&lt;/a&gt;什么情况下应该使用 Vuex？&lt;/h2&gt;&lt;p&gt;Vuex 可以帮助我们管理共享状态，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySql</title>
    <link href="http://example.com/2020/10/20/MySql/"/>
    <id>http://example.com/2020/10/20/MySql/</id>
    <published>2020-10-20T12:58:14.000Z</published>
    <updated>2021-03-11T11:04:30.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、确保已安装wamp并且启动成功"><a href="#1、确保已安装wamp并且启动成功" class="headerlink" title="1、确保已安装wamp并且启动成功"></a>1、确保已安装wamp并且启动成功</h2><p>详情请见<a href="https://blog.csdn.net/baidu_39502694/article/details/99672941">wamp环境搭建</a></p><h2 id="2、下载navicat-premium"><a href="#2、下载navicat-premium" class="headerlink" title="2、下载navicat premium"></a>2、下载navicat premium</h2><p>文件 -&gt; 新建连接</p><p>点击自己新建的链接，新建数据库 字符集uft8 排序规则utf8_bin</p><h2 id="3、在项目文件夹中安装mySQL"><a href="#3、在项目文件夹中安装mySQL" class="headerlink" title="3、在项目文件夹中安装mySQL"></a>3、在项目文件夹中安装mySQL</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysqljs/mysql</span><br></pre></td></tr></table></figure><h2 id="4、在服务器js文件中使用mysql包"><a href="#4、在服务器js文件中使用mysql包" class="headerlink" title="4、在服务器js文件中使用mysql包"></a>4、在服务器js文件中使用mysql包</h2><h4 id="引入mysql包"><a href="#引入mysql包" class="headerlink" title="引入mysql包"></a>引入mysql包</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建数据库链接"><a href="#创建数据库链接" class="headerlink" title="创建数据库链接"></a>创建数据库链接</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//数据库所在的服务器的域名（或ip地址）</span></span><br><span class="line">    user: <span class="string">&#x27;me&#x27;</span>, <span class="comment">//登录数据库的账号</span></span><br><span class="line">    password: <span class="string">&#x27;secret&#x27;</span>, <span class="comment">//登陆数据库的密码</span></span><br><span class="line">    database: <span class="string">&#x27;book&#x27;</span> <span class="comment">//数据库的名称</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="执行链接操作"><a href="#执行链接操作" class="headerlink" title="执行链接操作"></a>执行链接操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><p>数据库的操作是异步的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">&#x27;数据库操作语句&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;The solution is:&#x27;</span>,results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="数据库常用语句"><a href="#数据库常用语句" class="headerlink" title="数据库常用语句"></a>数据库常用语句</h2><p>先给出代码大概框架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//数据库所在的服务器的域名（或ip地址）</span></span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>, <span class="comment">//登录数据库的账号</span></span><br><span class="line">    password: <span class="string">&#x27;&#x27;</span>, <span class="comment">//登陆数据库的密码</span></span><br><span class="line">    database: <span class="string">&#x27;book&#x27;</span> <span class="comment">//数据库的名称</span></span><br><span class="line">&#125;);</span><br><span class="line">connection.connect();</span><br><span class="line"><span class="comment">//此处开始进行数据库数据操作**********************之后的代码只有此处不同</span></span><br><span class="line"><span class="comment">// ？ 是为了给后面的数据进行填充</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;insert into book set ?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;百年孤独&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;加西亚·马尔克斯&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果 是个对象</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="keyword">if</span>(results.affectedRows == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据插入成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//此处结束数据库数据操作************************</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ？ 是为了给后面的数据进行填充</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;insert into book set ?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;百年孤独&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;加西亚·马尔克斯&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="keyword">if</span>(results.affectedRows == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据插入成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;delete from book where id=?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">2</span>];</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="keyword">if</span>(results.affectedRows == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据删除成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;update book set name=?,author=? where id=?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;红楼梦&#x27;</span>,<span class="string">&#x27;曹雪芹&#x27;</span>,<span class="number">2</span>];</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="keyword">if</span>(results.affectedRows == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let sql = &#x27;select * from book&#x27;; // * 查询范围是全部数据</span></span><br><span class="line"><span class="comment">//let data = null;</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;select * from book where id = ?&#x27;</span>;  <span class="comment">//从所有数据中查询id为？的数据</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>];</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(results[<span class="number">0</span>].name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难发现对数据的增删改查在代码层面是类似的。</p><h4 id="封装对数据库的操作"><a href="#封装对数据库的操作" class="headerlink" title="封装对数据库的操作"></a>封装对数据库的操作</h4><p>新建一个db.js文件，此js中的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">//当sql是插入操作时，data需要是一个对象</span></span><br><span class="line"><span class="comment">//当sql是删改查时，data是一个数组数组中的数据与表中的字段顺序要一一对应</span></span><br><span class="line"><span class="built_in">exports</span>.base = <span class="function">(<span class="params">sql,data,callback</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">        host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        database: <span class="string">&#x27;book&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">        callback(results);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、确保已安装wamp并且启动成功&quot;&gt;&lt;a href=&quot;#1、确保已安装wamp并且启动成功&quot; class=&quot;headerlink&quot; title=&quot;1、确保已安装wamp并且启动成功&quot;&gt;&lt;/a&gt;1、确保已安装wamp并且启动成功&lt;/h2&gt;&lt;p&gt;详情请见&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深度优先与广度优先遍历DOM(递归与非递归)</title>
    <link href="http://example.com/2020/10/13/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86DOM-%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>http://example.com/2020/10/13/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86DOM-%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92/</id>
    <published>2020-10-13T10:12:12.000Z</published>
    <updated>2021-03-11T11:00:15.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度优先与广度优先遍历DOM-递归与非递归"><a href="#深度优先与广度优先遍历DOM-递归与非递归" class="headerlink" title="深度优先与广度优先遍历DOM(递归与非递归)"></a>深度优先与广度优先遍历DOM(递归与非递归)</h1><p>若存在以下的DOM树结构我们改如何遍历所有的DOM节点;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法一：深度优先遍历算法"><a href="#方法一：深度优先遍历算法" class="headerlink" title="方法一：深度优先遍历算法"></a>方法一：深度优先遍历算法</h2><h4 id="什么是深度优先算法？"><a href="#什么是深度优先算法？" class="headerlink" title="什么是深度优先算法？"></a>什么是深度优先算法？</h4><p>这里以二叉树为例</p><p>若有二叉树</p><p><img src="https://howlcn1997.github.io/2019/05/11/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86DOM-%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92/%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p><p>深度优先遍历的结果：1 2 4 7 8 3 5 6 9 （若要深入了解，请自行百度”二叉树” “数据结构 图” “c语言 数据结构 深度优先遍历算法”）</p><p>根据此算法编写JS代码</p><h4 id="递归实现深度优先遍历"><a href="#递归实现深度优先遍历" class="headerlink" title="递归实现深度优先遍历"></a>递归实现深度优先遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DFS</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> child = node.children;</span><br><span class="line">    <span class="keyword">if</span>(child)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; child.length;i++)&#123;</span><br><span class="line">            nodes.push(child[i]);</span><br><span class="line">            child[i].children &amp;&amp; DFS(child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">DFS(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(nodes);</span><br></pre></td></tr></table></figure><p>递归实现深度优先遍历代码优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DFS</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        nodes.push(node);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; node.children.length;i++)</span><br><span class="line">            DFS(node.children[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">DFS(root);</span><br><span class="line"><span class="built_in">console</span>.log(nodes);</span><br></pre></td></tr></table></figure><p>闭包封装DFS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DFS</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node)&#123;</span><br><span class="line">            nodes.push(node);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; node.children.length;i++)</span><br><span class="line">            fn(node.children[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(node);</span><br><span class="line">    <span class="keyword">return</span> nodes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(DFS(root));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="非递归实现深度优先遍历"><a href="#非递归实现深度优先遍历" class="headerlink" title="非递归实现深度优先遍历"></a>非递归实现深度优先遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DFS</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = [];<span class="comment">//记录遍历到的节点</span></span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        <span class="keyword">var</span> stark = [];<span class="comment">//栈</span></span><br><span class="line">        stark.push(node);</span><br><span class="line">        <span class="keyword">while</span>(stark.length)&#123; <span class="comment">//若栈不为空则一直出栈</span></span><br><span class="line">            <span class="keyword">var</span> temp = stark.pop();</span><br><span class="line">            nodes.push(temp);</span><br><span class="line">            <span class="keyword">if</span>(temp.children)</span><br><span class="line">                <span class="comment">// for(var i = 0;i &lt; temp.children.length;i++) //此法导致nodes中的元素顺序与页面上的顺序是相反的</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = temp.children.length-<span class="number">1</span>;i &gt;= <span class="number">0</span> ;i--)</span><br><span class="line">                    stark.push(temp.children[i]);<span class="comment">//进栈</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(DFS(root));</span><br></pre></td></tr></table></figure><h2 id="方法二：广度优先遍历算法"><a href="#方法二：广度优先遍历算法" class="headerlink" title="方法二：广度优先遍历算法"></a>方法二：广度优先遍历算法</h2><p>广度优先遍历二叉树结果:1 2 3 4 5 6 7 8 9（若要深入了解，请自行百度”二叉树” “数据结构 图” “c语言 数据结构 广度优先遍历算法”）</p><p>根据此算法编写JS代码</p><h4 id="非递归实现广度优先算法"><a href="#非递归实现广度优先算法" class="headerlink" title="非递归实现广度优先算法"></a>非递归实现广度优先算法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BFS</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = [];<span class="comment">//记录获取到的节点</span></span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        <span class="keyword">var</span> queue  = [];</span><br><span class="line">        queue.push(node); <span class="comment">//进队</span></span><br><span class="line">        <span class="keyword">while</span>(queue.length)&#123;  <span class="comment">//只要队列不为空 就让其出队</span></span><br><span class="line">            <span class="keyword">var</span> temp = queue.shift();</span><br><span class="line">            nodes.push(temp);</span><br><span class="line">            <span class="keyword">if</span>(temp.children)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; temp.children.length;i++)</span><br><span class="line">                    queue.push(temp.children[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(BFS(root));</span><br></pre></td></tr></table></figure><p>到此，已用JS代码实现深度优先 广度优先算法，若有更好，效率更高的解决办法，欢迎与我讨论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深度优先与广度优先遍历DOM-递归与非递归&quot;&gt;&lt;a href=&quot;#深度优先与广度优先遍历DOM-递归与非递归&quot; class=&quot;headerlink&quot; title=&quot;深度优先与广度优先遍历DOM(递归与非递归)&quot;&gt;&lt;/a&gt;深度优先与广度优先遍历DOM(递归与非递归)</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅析Javascript中作用域、作用域链和预解析</title>
    <link href="http://example.com/2020/10/12/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2020/10/12/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/</id>
    <published>2020-10-12T10:38:45.000Z</published>
    <updated>2021-03-11T11:27:37.265Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中, 对象和函数同样也是变量。在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。JavaScript 函数作用域: 作用域在函数内修改。</p><br><br><br><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><br><p>作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><p>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。</p><br><h3 id="1-全局作用域（全局变量）"><a href="#1-全局作用域（全局变量）" class="headerlink" title="1.全局作用域（全局变量）"></a>1.全局作用域（全局变量）</h3><br><p><strong>全局变量，原理就是将变量挂载到window对象中.</strong></p><p><strong>全局变量拥有全局的作用域，可在任意地方被调用</strong></p><br><p>全局变量有两种声明方式</p><h4 id="（1）函数外部"><a href="#（1）函数外部" class="headerlink" title="（1）函数外部"></a>（1）函数外部</h4><br><p>(写在函数外面的都是全局变量)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> num = <span class="number">15</span>; <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">//不是全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">/*----*/</span> </span></span><br><span class="line">        &#125;</span><br><span class="line">            f2();</span><br><span class="line">        &#125;</span><br><span class="line">f();</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(num); <span class="comment">//  15</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h4 id="（2）函数内部"><a href="#（2）函数内部" class="headerlink" title="（2）函数内部"></a>（2）函数内部</h4><br><p>(不加var的变量声明，隐式全局变量)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    num = <span class="number">10</span>; <span class="comment">//隐式全局变量</span></span></span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h4 id="全局变量与隐式全局变量的区别"><a href="#全局变量与隐式全局变量的区别" class="headerlink" title="全局变量与隐式全局变量的区别"></a>全局变量与隐式全局变量的区别</h4><br><p>隐式全局变量可以通过delete关键字来删除，全局变量不可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//全局变量不可被delete</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//****</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  2</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">delete</span> a;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  2</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//隐式全局变量被delete</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        a = <span class="number">2</span>; <span class="comment">//隐式全局变量</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  2</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">delete</span> a;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  not defined (已被删除)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="2-局部作用域-局部变量"><a href="#2-局部作用域-局部变量" class="headerlink" title="2.局部作用域(局部变量)"></a>2.局部作用域(局部变量)</h3><br><p>局部变量：写在函数体里面的变量</p><p>局部变量只可以在当前函数内部使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">//局部变量</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    f2();</span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(num); <span class="comment">//  not defined</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><h2 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h2><br><p>作用域链简而言之就是，调用变量时，若当前作用域内没有该变量时就向它的上一级作用域去寻找。</p><p>Javascript用的是词法作用域（静态作用域）</p><br><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="comment">/* 0级作用域 */</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>)</span>&#123;    <span class="comment">/* 1级作用域 */</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//var a = 2;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/* 2级作用域 */</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//var a = 3;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a);  <span class="comment">// 1</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    bb();</span><br><span class="line">&#125;</span><br><span class="line">aa();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br>作用过程：</p><ol><li>当运行到console.log(a)时，会在当前作用域（2级作用域）内寻找是否有a可用；</li><li>若有直接使用，否则向上一级作用域（1级作用域）去寻找；</li><li>此时来到1级作用域，若此时有a可用则用，否则继续向上一级寻找，直到到达0级作用域；</li><li>此时来到0级作用域，若此时有a可用则用，否则报错；</li></ol><p><img src="https://p.130014.xyz/2021/03/11/8001ec9ad2141255021e73e9fded448d.jpg"></p><br><p><strong>值得注意的是：作用域链的始发点与函数的调用位置无关，而与函数的声明位置有关</strong> 例子如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> value = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> value = <span class="number">2</span>;</span></span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="三、预解析"><a href="#三、预解析" class="headerlink" title="三、预解析"></a>三、预解析</h2><br><p>当浏览器执行Javascript代码时，为了提高执行效率会在代码解释执行前进行预解析处理。</p><br><p>预解析处理规则：</p><p>\1. 变量提升 仅仅将变量声明提升到当前作用域的最上面，不包括变量的赋值<br>\2. 函数提升 将函数的声明提升到当前作用域的最上面，不包括函数的调用 <strong>函数的声明会提前到变量声明之前</strong></p><br><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><br><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码结果打印为undefined,而不是10，这是为什么呢？</p><p>我们来看看与解析之后的结果，</p><p>预解析为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a);</span></span><br><span class="line">a = 10;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于变量声明被提升到作用域最前端，而赋值没有被提升，导致执行console.log(a);时 a还未被赋值。</p><br><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><br><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    f1();</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*-----*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>被解析为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*-----*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="函数的声明会提前到变量声明之前"><a href="#函数的声明会提前到变量声明之前" class="headerlink" title="函数的声明会提前到变量声明之前"></a>函数的声明会提前到变量声明之前</h3><br><p>函数提升和变量提升同时发生时，函数的声明会提前到变量声明之前。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">10</span>);</span></span><br><span class="line">    &#125;   </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line">    a();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">10</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a;</span></span><br><span class="line">a = 3</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">    a(); <span class="comment">//not function  因为此时a为变量而不是函数</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p><strong>值得注意的是：</strong></p><p>1.函数是可以被打印的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*----*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//打印函数a</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.变量a的赋值可以被普通类型和函数互相取代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a；</span></span><br><span class="line"><span class="javascript">    a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*----*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a); <span class="comment">//打印函数a</span></span></span><br><span class="line">a = 1;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">// 1；</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="匿名函数的申明不遵循预解析规则"><a href="#匿名函数的申明不遵循预解析规则" class="headerlink" title="匿名函数的申明不遵循预解析规则"></a>匿名函数的申明不遵循预解析规则</h3><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    f();  <span class="comment">//报错</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*----*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为解析前后代码相同 执行 <strong>f()</strong> 时，f未被声明为函数类型。</p><br><h3 id="隐式全局变量的注意点"><a href="#隐式全局变量的注意点" class="headerlink" title="隐式全局变量的注意点"></a>隐式全局变量的注意点</h3><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    f();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);  <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a); <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b); <span class="comment">//9</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>被解析为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a;  <span class="comment">//局部变量</span></span></span><br><span class="line">      a = 9;  </span><br><span class="line"><span class="javascript">      b = <span class="number">9</span>;  <span class="comment">//隐式全局变量</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a);  <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b);  <span class="comment">//9</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);  <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);  <span class="comment">//undefined   因为a是局部变量</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 JavaScript 中, 对象和函数同样也是变量。在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。JavaScript 函数作用域: 作用域在函数内修改。&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;一、作用域&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="新技术" scheme="http://example.com/tags/%E6%96%B0%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Express服务器的搭建</title>
    <link href="http://example.com/2020/10/08/Express%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/10/08/Express%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-10-08T06:05:44.000Z</published>
    <updated>2021-03-11T11:02:20.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>是基于Node.js平台，快速、开放极简的web开发框架</p><p>初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y  <span class="comment">//加-y时 会以默认参数创建package.json文件   若不加 可以自定义package.json参数信息</span></span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -save</span><br></pre></td></tr></table></figure><p>自动重启服务器工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemon  <span class="comment">//若要使用该工具  在启动服务器时要使用nodemon命令 如 nodemon ./server.js</span></span><br></pre></td></tr></table></figure><p>路径的匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配student开头，而且后面跟了学号   http://localhost:8000/student/1234</span></span><br><span class="line">app.get(<span class="string">&quot;/student/:id/:name&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.params[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> name = req.params[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    res.send(id+name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="中间件的另一种使用方式"><a href="#中间件的另一种使用方式" class="headerlink" title="中间件的另一种使用方式"></a>中间件的另一种使用方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f3 = <span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    res.send();</span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="string">&#x27;/user&#x27;</span>,[f1,f2,f3]);</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="next注意点"><a href="#next注意点" class="headerlink" title="next注意点"></a>next注意点</h2><p>有如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//无门槛进入  只要是localhost:3000就会响应</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;有用户进入...函数一&#x27;</span>);</span><br><span class="line">    next(); <span class="comment">//通关文牒</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;  </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;有用户进入...函数二&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;访问结束&#x27;</span>);</span><br><span class="line">    res.send(<span class="string">&#x27;用户页面&#x27;</span>+total);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>next() 不加参数时会指向下一个执行函数，即函数一中的next()会指向函数二</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//无门槛进入  只要是localhost:3000就会响应</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;有用户进入...函数一&#x27;</span>);</span><br><span class="line">    next(<span class="string">&#x27;/user&#x27;</span>); <span class="comment">//通关文牒</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;  </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;有用户进入...函数二&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;访问结束&#x27;</span>);</span><br><span class="line">    res.send(<span class="string">&#x27;用户页面&#x27;</span>+total);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>next(‘/user’) 加参数时，会跳转至下一个路径为/user的use函数，即跳过函数二直接来到下一个use函数。</strong></p><h2 id="body-parser的使用"><a href="#body-parser的使用" class="headerlink" title="body-parser的使用"></a>body-parser的使用</h2><p><strong>作用：可以获取post请求中信息</strong></p><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">//若要获取post中的参数 则必须以此挂载bodyparser中间件</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.use(express.static(<span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;name:&#x27;</span>+req.body.username);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a.toString()); <span class="comment">//null不能调用toString()  此处故意制造错误</span></span><br><span class="line">        next();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        next(e); <span class="comment">//转至错误处理中间件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//错误处理中间件（注意。错误处理中间件 要用use）</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res.send(err); 无法打印</span></span><br><span class="line">    res.send(err.toString());</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="指定静态资源"><a href="#指定静态资源" class="headerlink" title="指定静态资源"></a>指定静态资源</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">&#x27;views&#x27;</span>));<span class="comment">//指定views文件夹为静态资源文件夹  若该文件夹中存在login.html 则可以通过http:localhost:3000/login.html来直接访问该页面</span></span><br></pre></td></tr></table></figure><h2 id="Router类的使用"><a href="#Router类的使用" class="headerlink" title="Router类的使用"></a>Router类的使用</h2><p>1、先创建一个需要js文件，每一个js文件就是一个类</p><p>每一个js文件中的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router(); <span class="comment">//创建router类</span></span><br><span class="line">router.get(<span class="string">&#x27;/c1&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//设置请求响应函数  /c1为访问路径</span></span><br><span class="line">    res.send(<span class="string">&#x27;/c1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">&#x27;/c2&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;<span class="comment">//设置请求响应函数</span></span><br><span class="line">    res.send(<span class="string">&#x27;/c2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;  <span class="comment">//将router暴露出去</span></span><br></pre></td></tr></table></figure><p>2、当创建若干js文件（类）之后，用一个js文件进行汇总使用，相当于入口文件 此处创建server.js</p><p>写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> chang = <span class="built_in">require</span>(<span class="string">&#x27;./chang&#x27;</span>); <span class="comment">//引入自定义的类</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">app.use(<span class="string">&#x27;/chang&#x27;</span>,chang);  <span class="comment">//访问方式 localhost:3000/chang/c1     //此处用use指定的/chang只是虚拟路径 并不存在真实的物理路径</span></span><br><span class="line"><span class="comment">//app.use(chang);   //访问方式 localhost:3000/c1 </span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//app.use(.....)</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种使用方式相当于自定义了中间件后，再在server中使用。</p><h2 id="art-template的使用"><a href="#art-template的使用" class="headerlink" title="art-template的使用"></a>art-template的使用</h2><h3 id="art-template在前台的使用"><a href="#art-template在前台的使用" class="headerlink" title="art-template在前台的使用"></a>art-template在前台的使用</h3><p>下载<a href="http://aui.github.io/art-template/docs/installation.html">art-template-web</a></p><p>1、将art-template-web.js引入到页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./template-web.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、在页面中定义一个模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="comment">//此script标签相当于一个容器</span></span><br><span class="line">&lt;script id=<span class="string">&quot;test&quot;</span> type=<span class="string">&quot;text/html&quot;</span>&gt; <span class="comment">//注意 此处一定要加上  type=&quot;text/html&quot;</span></span><br><span class="line">    &#123;&#123;each users&#125;&#125;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;$value.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;li&gt;&#123;&#123;$value.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&#123;&#123;$value.gender&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&#123;&#123;$value.love&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        users:[&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;唱&#x27;</span>&#125;,</span><br><span class="line">               &#123;<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">13</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;跳&#x27;</span>&#125;,</span><br><span class="line">               &#123;<span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;rap&#x27;</span>&#125;,</span><br><span class="line">               &#123;<span class="attr">name</span>: <span class="string">&#x27;蔡徐坤&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;篮球&#x27;</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果数组中都是对象，且要访问对象内的值时要使用$value.xxx  value代表当前遍历到的数组元素</span></span><br><span class="line">    <span class="keyword">var</span> html = template(<span class="string">&#x27;test&#x27;</span>,data);</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    box.innerHTML = html;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>另一种实现方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//当使用此法时 模板字符串拼接时  每一个标签要单独用 &quot;&quot; 括起来</span></span><br><span class="line">    <span class="keyword">var</span> artt = <span class="string">&quot;&#123;&#123;each users&#125;&#125;&quot;</span>+</span><br><span class="line">        <span class="string">&quot;&lt;h1&gt;&#123;&#123;$value.name&#125;&#125;&lt;/h1&gt;&quot;</span>+</span><br><span class="line">        <span class="string">&quot;&lt;li&gt;&#123;&#123;$value.age&#125;&#125;&lt;/li&gt;&quot;</span>+</span><br><span class="line">        <span class="string">&quot;&lt;li&gt;&#123;&#123;$value.gender&#125;&#125;&lt;/li&gt;&quot;</span>+</span><br><span class="line">        <span class="string">&quot;&lt;li&gt;&#123;&#123;$value.love&#125;&#125;&lt;/li&gt;&quot;</span>+</span><br><span class="line">    <span class="string">&quot;&#123;&#123;/each&#125;&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> render = template.compile(artt);</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        users:[&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;唱&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">13</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;跳&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;rap&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;蔡徐坤&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">love</span>: <span class="string">&#x27;篮球&#x27;</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果数组中都是对象，且要访问对象内的值时要使用$value.xxx  value代表当前遍历到的数组元素</span></span><br><span class="line">    <span class="keyword">var</span> html = render(data);</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    box.innerHTML = html;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="art-template在后台中的使用"><a href="#art-template在后台中的使用" class="headerlink" title="art-template在后台中的使用"></a>art-template在后台中的使用</h3><p>初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template --save</span><br><span class="line">npm install express-art-template --save</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//指定art-template渲染的文件后缀是html</span></span><br><span class="line">app.engine(<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br><span class="line"><span class="comment">//指定静态资源目录</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;views&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h1&gt;&lt;p&gt;是基于Node.js平台，快速、开放极简的web开发框架&lt;/p&gt;
&lt;p&gt;初始化&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6新特性</title>
    <link href="http://example.com/2020/08/08/ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2020/08/08/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2020-08-08T12:42:37.000Z</published>
    <updated>2021-03-11T11:01:13.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><p>ES6 = ECMAScript 6</p><h2 id="申明变量let和const"><a href="#申明变量let和const" class="headerlink" title="申明变量let和const"></a>申明变量let和const</h2><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><ul><li><p>let申明变量不存在预解析；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//结果：报错</span></span><br></pre></td></tr></table></figure></li><li><p>let声明的变量不允许重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure></li><li><p>ES6引入了块级作用域<br>块内部定义的变量，在外部无法访问(PS: 只要被 { } 包裹起来，就形成块级作用域)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>let必须先声明在使用<br>因为用let申明的变量没有预解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tem = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> tem;  <span class="comment">//报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>const声明的常量不能被重新赋值，且在申明的同时就要被初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">1</span>;<span class="comment">//申明的同时就要初始化</span></span><br><span class="line">n = <span class="number">2</span>;<span class="comment">//此处报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h2><h5 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var a =1,b=2,c=3;//js中的写法</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//node中 数组的解构赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);<span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">//声明时赋初值</span></span><br><span class="line"><span class="keyword">let</span> [a=<span class="number">123</span>,b,c] = [,<span class="number">456</span>,];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);<span class="comment">// 123 456 undefined</span></span><br></pre></td></tr></table></figure><p>利用解构赋值交换两个变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a,b);<span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure><p>对象的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;foo,bar&#125; = &#123;<span class="attr">foo</span> : <span class="string">&#x27;hello&#x27;</span>,<span class="attr">bar</span> : <span class="string">&#x27;hi&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo,bar);</span><br></pre></td></tr></table></figure><p>字符串的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e);<span class="comment">//h e l l o</span></span><br></pre></td></tr></table></figure><h2 id="字符串相关扩展"><a href="#字符串相关扩展" class="headerlink" title="字符串相关扩展"></a>字符串相关扩展</h2><h5 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h5><p>include(str [,index]) str 所要匹配的字符串 ； index 从什么位置开始匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.includes(<span class="string">&#x27;world&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.includes(<span class="string">&#x27;world&#x27;</span>,<span class="number">7</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h5><p>判断字符串是否特定字符串开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;admin/index.php&#x27;</span>.startsWith(<span class="string">&#x27;admin&#x27;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h5><p>判断字符串是否特定字符串结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;admin/index.php&#x27;</span>.startsWith(<span class="string">&#x27;php&#x27;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>在js中若要拼接字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age:<span class="number">13</span>,</span><br><span class="line">    gender:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;&lt;span&gt;&#x27;</span>+obj.name+<span class="string">&#x27;&lt;/span&gt;&lt;span&gt;&#x27;</span>+obj.age+<span class="string">&#x27;&lt;/span&gt;&lt;span&gt;&#x27;</span>+obj.gender+<span class="string">&#x27;&lt;/span&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//&lt;div&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>利用模板字符串进行拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age:<span class="number">13</span>,</span><br><span class="line">    gender:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;$&#123;obj.name&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;$&#123;obj.age&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;$&#123;obj.gender&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;span&gt;$&#123;1+1&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;span&gt;$&#123;fn(&#x27;</span>你好<span class="string">&#x27;)&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//&lt;div&gt;</span></span><br><span class="line"><span class="comment">//    &lt;span&gt;张三&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//    &lt;span&gt;13&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//    &lt;span&gt;男&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//      &lt;span&gt;2&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//      &lt;span&gt;你好&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数的相关扩展"><a href="#函数的相关扩展" class="headerlink" title="函数的相关扩展"></a>函数的相关扩展</h2><ol><li><p>参数的默认值</p></li><li><p>参数的解构赋值</p></li><li><p>rest参数</p></li><li><p>…扩展运算符</p></li><li><p>箭头函数</p></li></ol><h5 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h5><p>在js中的若要给函数参数指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = param || <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo();</span></span><br><span class="line"><span class="comment">//foo(&#x27;nihao&#x27;);</span></span><br></pre></td></tr></table></figure><p>在ES6中给函数参数指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param = <span class="string">&#x27;hello&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo();</span></span><br><span class="line"><span class="comment">//foo(&#x27;nihao&#x27;);</span></span><br></pre></td></tr></table></figure><h5 id="参数的解构赋值"><a href="#参数的解构赋值" class="headerlink" title="参数的解构赋值"></a>参数的解构赋值</h5><p>默认参数的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param = <span class="string">&#x27;hello&#x27;</span> , age = <span class="number">12</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo();</span></span><br><span class="line"><span class="comment">//foo(&#x27;nihao&#x27;,18);</span></span><br></pre></td></tr></table></figure><p>参数的解构赋值的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;param,age&#125;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo(&#123;&#125;);  //注意 此时一定要传入一个对象</span></span><br><span class="line"><span class="comment">//添加默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;param = <span class="string">&#x27;hello&#x27;</span>,age = <span class="number">12</span>&#125;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo(&#123;&#125;);  //注意 此时一定要传入一个对象</span></span><br><span class="line"><span class="comment">//foo(&#123;param = &#x27;nihao&#x27;,age = 18&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="rest参数（剩余参数）"><a href="#rest参数（剩余参数）" class="headerlink" title="rest参数（剩余参数）"></a>rest参数（剩余参数）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,...param</span>)</span>&#123; <span class="comment">//...param会以数组的形式存储剩余的参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//[3,4,5,6,7]</span></span><br></pre></td></tr></table></figure><h5 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符 …"></a>扩展运算符 …</h5><p>使用 … 将数组拆撒后入参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo(1,2,3,4);//传统调用方式</span></span><br><span class="line"><span class="comment">//当要传入一个数组时 arr = [1,2,3,4]</span></span><br><span class="line"><span class="comment">//方法一 使用foo.apply(null,arr);</span></span><br><span class="line"><span class="comment">//方法二 使用 ...   将数组拆散</span></span><br><span class="line">foo(...arr); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>使用 … 合并数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);<span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统函数声明以及调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="comment">//ES6 中新增的函数申明以及调用  =&gt;</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">形参参数列表</span>) =&gt;</span> &#123;函数体&#125;;</span><br><span class="line">foo(实参列表);</span><br><span class="line"><span class="comment">//用处 例子</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">//arr.forEach(function(e,index)&#123;</span></span><br><span class="line"><span class="comment">//    console.log(e);</span></span><br><span class="line"><span class="comment">//      console.log(index);</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">e,index</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(e);<span class="built_in">console</span>.log(index)&#125;);</span><br></pre></td></tr></table></figure><p>箭头函数的注意事项</p><ol><li><p>箭头函数中this取决于函数的定义，而不是函数的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用箭头函数时 this取决于调用者  此时是window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();<span class="comment">//window</span></span><br><span class="line"><span class="comment">//使用箭头函数中的this 取决函数声明的环境 此时是在obj中声明的  则this指向obj</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();<span class="comment">//obj&#123;name:&quot;张三&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>箭头参数不可以new</p></li><li><p>箭头函数不可以使用arguments获取参数列表，可以使用rest代替</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">...param</span>) =&gt;</span> <span class="built_in">console</span>.log(param);</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].keys(); <span class="comment">//Array.keys()  返回数组的所有下标[0,1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//迭代返回当前位置的下标 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].values(); <span class="comment">//Array.values()  返回数组的所有值</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next());  <span class="comment">//迭代返回当前位置的值  a</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next());  <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next());  <span class="comment">//c</span></span><br><span class="line"><span class="comment">//数组查找</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;  <span class="comment">//find 返回满足条件的第一个元素值</span></span><br><span class="line">        <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].filter(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;  <span class="comment">//filter 返回满足条件的所有元素值</span></span><br><span class="line">        <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123; <span class="comment">//findIndex 返回满条件的第一个元素下标</span></span><br><span class="line">        <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组包含</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">123</span>,<span class="number">456</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="literal">NaN</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.includes(<span class="number">456</span>));<span class="comment">//Array.includes(item);在数组中查询有无item元素 返回boolean</span></span><br><span class="line">    <span class="comment">//也可以查询有无非数字</span></span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>ES6新增数据类型 属于基本数据类型，Symbol不可以new</p><p>Symbol声明的变量是唯一的，意义在于减少命名冲突；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Symbol的变量是唯一的，所以a1和a2永远不相等</span></span><br><span class="line">    <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(a1 === a2);</span><br><span class="line">   <span class="comment">//Symbol.for(key)</span></span><br><span class="line">   <span class="comment">//在使用Symbol时  会生成一个全局注册表，其中的数据以键值对的形式存在；能根据key来拿到对应的value</span></span><br><span class="line">   <span class="comment">//若  a3  a4的key是相同的  那么a3 a4是相同的</span></span><br><span class="line">    <span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a3&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a3&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a3 === a4);  <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//问题  若改变a3的值  a4的值会改变吗？</span></span><br><span class="line">    <span class="comment">//是值复制   还是指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6中涉及到的数据结构"><a href="#ES6中涉及到的数据结构" class="headerlink" title="ES6中涉及到的数据结构"></a>ES6中涉及到的数据结构</h2><h5 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h5><p>数组中的元素可以重复，且数组中元素的排列是有序的（因此可以通过下标访问）</p><h5 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h5><p>集合的元素是唯一的，不可以重复出现，且集合中的元素是无序的（因此无法通过下标访问集合中的元素）</p><h5 id="Set中的方法"><a href="#Set中的方法" class="headerlink" title="Set中的方法"></a>Set中的方法</h5><table><thead><tr><th>set.add(ele)</th><th>向set集合中追加ele元素</th></tr></thead><tbody><tr><td>set.has(ele)</td><td>判断set集合中是否存在ele元素</td></tr><tr><td>set.delete(ele)</td><td>从集合中删除ele元素</td></tr><tr><td>set.clear()</td><td>清空set集合</td></tr><tr><td>set.forEach( (ele) =&gt;{} )</td><td>遍历集和</td></tr></tbody></table><p>set对象的创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> set();</span><br></pre></td></tr></table></figure><h2 id="数组与集合的互相转换"><a href="#数组与集合的互相转换" class="headerlink" title="数组与集合的互相转换"></a>数组与集合的互相转换</h2><h5 id="数组-gt-集合"><a href="#数组-gt-集合" class="headerlink" title="数组==&gt;集合"></a>数组==&gt;集合</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> set(arr);</span><br></pre></td></tr></table></figure><h5 id="集合-gt-数组"><a href="#集合-gt-数组" class="headerlink" title="集合==&gt;数组"></a>集合==&gt;数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> set();</span><br><span class="line"><span class="keyword">let</span> arr = [...set];</span><br></pre></td></tr></table></figure><h5 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h5><h5 id="WeakSet-结构与-Set-类似，也是不重复的值的集合。但是，它与-Set-有下面区别。"><a href="#WeakSet-结构与-Set-类似，也是不重复的值的集合。但是，它与-Set-有下面区别。" class="headerlink" title="WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。"></a>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。</h5><ul><li>WeakSet 的成员只能是对象，而不能是其他类型的值。</li><li>WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不 再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</li><li>WeakSet 只有add/delete/clear/has三个方法，不能遍历，没有size属性等</li></ul><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p>Map也是由键值对构成的，和对象的区别在于Map的key也可以是一个对象，Object只可以是字符串</p><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><h5 id="代理Proxy"><a href="#代理Proxy" class="headerlink" title="代理Proxy"></a>代理Proxy</h5><p>代理：通过代理对象访问目标对象<br>作用：</p><ul><li>控制目标对象的访问权限。</li><li>扩展目标对象方法</li></ul><p>创建目标对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetObject = &#123;</span><br><span class="line">    name:<span class="string">&quot;target&quot;</span>,</span><br><span class="line">    type:<span class="string">&quot;object&quot;</span>,</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;目标对象的fun&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetObject,&#123;</span><br><span class="line">    <span class="comment">//target 就是目标的对象</span></span><br><span class="line">    <span class="comment">//key 就是目标对象中的每一个属性和方法</span></span><br><span class="line">    <span class="comment">//当代理对象直接获取属性和方法的等信息的时候都会来调用get方法</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">&#x27;fun&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;代理对象调用目标对象的fun&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当给对象的属性和方法赋值的时候调用set方法</span></span><br><span class="line">    <span class="comment">//target 就是目标的对象</span></span><br><span class="line">    <span class="comment">//key 就是目标对象中的每一个属性和方法</span></span><br><span class="line">    <span class="comment">//value 属性值</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target,key,value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果key为type的时候就不给目标对象赋值</span></span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">&#x27;type&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target[type];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当通过 xx in obj 的时候调用has方法</span></span><br><span class="line">    <span class="function"><span class="title">has</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">&#x27;type&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当删除对象的属性时 调用此方法</span></span><br><span class="line">    <span class="function"><span class="title">deleteProperty</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">&#x27;age&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> target[key];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.fun(); <span class="comment">//代理对象调用目标对象的fun     目标对象的fun</span></span><br><span class="line">p.name = <span class="string">&#x27;temp&#x27;</span>; <span class="comment">//修改无效  当使用点的方式来访问属性时 会调用set函数  而set函数中设置了对name的修改权限</span></span><br><span class="line"><span class="built_in">console</span>.log(p);  <span class="comment">//&#123; name: &#x27;target&#x27;, type: &#x27;object&#x27;, fun: [Function: fun] &#125;</span></span><br><span class="line">p.type = <span class="string">&#x27;temp&#x27;</span>; <span class="comment">//修改成功  set中没有对type的权限要求</span></span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">//&#123; name: &#x27;target&#x27;, type: &#x27;temp&#x27;, fun: [Function: fun] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;type&#x27;</span> <span class="keyword">in</span> p); <span class="comment">//true  当使用in判断对象中是否有某属性时 会调用has函数 而我们在has中对type设置了权限 则无法访问</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> p); <span class="comment">//true  未对name设置  则访问成功</span></span><br><span class="line"><span class="keyword">delete</span> p.name;  <span class="comment">//删除失败   当使用点的方式来删除某属性时会默认调用deleteProperty方法 而我们在deleteProperty中限制了对name的删除权限 则删除失败</span></span><br><span class="line"><span class="keyword">delete</span> p.type;  <span class="comment">//删除成功   </span></span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">//&#123; name: &#x27;target&#x27;, fun: [Function: fun] &#125;</span></span><br></pre></td></tr></table></figure><h5 id="反射Reflect"><a href="#反射Reflect" class="headerlink" title="反射Reflect"></a>反射Reflect</h5><p>反射机制是指程序在运行的时候访问、检测和修改它本身状态或行为的一种能力，例如一个对象能够在运行时知道自己有哪些方法和属性。</p><p>反射的概念在编译型的编程语言中比较明显，比如java、C#、Object-c等。对于 JavaScript来说，反射就是获取对象的内部结构的信息，所以JS中的反射随处可见，比如for…in方式遍历对象。</p><p>从ECMAScript6开始，JS引入Reflect这个API专门用于操作反射。</p><p>ES6中的反射，将抛出异常，异常捕获简化为返回一个boolean值来表示其是否正常运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6新特性&quot;&gt;&lt;a href=&quot;#ES6新特性&quot; class=&quot;headerlink&quot; title=&quot;ES6新特性&quot;&gt;&lt;/a&gt;ES6新特性&lt;/h1&gt;&lt;p&gt;ES6 = ECMAScript 6&lt;/p&gt;
&lt;h2 id=&quot;申明变量let和const&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js三大家族</title>
    <link href="http://example.com/2020/06/08/js%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/"/>
    <id>http://example.com/2020/06/08/js%E4%B8%89%E5%A4%A7%E5%AE%B6%E6%97%8F/</id>
    <published>2020-06-08T01:44:26.000Z</published>
    <updated>2021-03-11T11:03:42.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-三大家族和一个事件对象"><a href="#1-三大家族和一个事件对象" class="headerlink" title="1. 三大家族和一个事件对象"></a>1. 三大家族和一个事件对象</h2><p>三大家族（offset/scroll/client）</p><p>事件对象/event （事件被触动时，鼠标和键盘的状态）（通过属性控制）</p><h2 id="2-Offset家族简介"><a href="#2-Offset家族简介" class="headerlink" title="2. Offset家族简介"></a>2. Offset家族简介</h2><p>offset这个单词本身是–偏移，补偿，位移的意思。</p><p>js中有一套方便的获取元素尺寸的办法就是offset家族；</p><p>offsetWidth和offsetHight以及offsetLeft和offsetTop以及offsetParent</p><p>共同组成了offset家族。</p><h4 id="2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）"><a href="#2-1-offsetWidth和offsetHight-（检测盒子自身宽高-padding-border）" class="headerlink" title="2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）"></a>2.1 offsetWidth和offsetHight （检测盒子自身宽高+padding+border）</h4><p>这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。</p><p>offset宽/高 = 盒子自身的宽/高 + padding+border；</p><p>offsetWidth =width+padding+border；</p><p>offsetHeight =Height+padding+border；</p><h4 id="2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）"><a href="#2-2-offsetLeft和offsetTop-（检测距离父盒子有定位的左-上面的距离）" class="headerlink" title="2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）"></a>2.2 offsetLeft和offsetTop （检测距离父盒子有定位的左/上面的距离）</h4><p>返回距离上级盒子（带有定位）左边s的位置</p><p>如果父级都没有定位则以body为准</p><p>offsetLeft 从父亲的padding 开始算,父亲的border 不算。</p><p>在父盒子有定位的情况下，offsetLeft == style.left(去掉px)</p><h4 id="2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）"><a href="#2-3-offsetParent-（检测父系盒子中带有定位的父盒子节点）" class="headerlink" title="2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）"></a>2.3 offsetParent （检测父系盒子中带有定位的父盒子节点）</h4><p>1、返回改对象的父级 （带有定位）</p><p>​ 如果当前元素的父级元素没有进行CSS定位 （position为absolute或 relative，fixed）， offsetParent为body。</p><p>2、如果当前元素的父级元素中有CSS定位 （position为absolute或 relative，fixed）， offsetParent取最近的那个父级元素。</p><h2 id="3-offsetLeft和style-left区别"><a href="#3-offsetLeft和style-left区别" class="headerlink" title="3. offsetLeft和style.left区别"></a>3. offsetLeft和style.left区别</h2><p>一、最大区别在于offsetLeft可以返回没有定位盒子的距离左侧的位置。而 style.left不可以</p><p>二、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</p><p>三、offsetTop 只读，而 style.top 可读写。（只读是获取值，可写是赋值）</p><p>四、如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style.left在=的左边和右边还不一样。（左边的时候是属性，右边的时候是值）</span><br></pre></td></tr></table></figure><h2 id="4-Scroll家族组成"><a href="#4-Scroll家族组成" class="headerlink" title="4. Scroll家族组成"></a>4. Scroll家族组成</h2><p>ScrollWidth和scrollHeight（不包括border）</p><p>检测盒子的宽高。（调用者：节点元素。属性。）</p><p>盒子内容的宽高。（如果有内容超出了，显示内容的高度）</p><p>IE567可以比盒子小。 IE8+火狐谷歌不能比盒子小</p><h4 id="4-1-scrollLeft和scrollTop"><a href="#4-1-scrollLeft和scrollTop" class="headerlink" title="4.1 scrollLeft和scrollTop"></a>4.1 scrollLeft和scrollTop</h4><p>网页，被浏览器遮挡的头部和左边部分。</p><p>被卷去的头部和左边部分。</p><p>兼容性问题</p><p>一、未声明 DTD（谷歌只认识他）</p><p>document.body.scrollTop</p><p>二、已经声明DTD（IE678只认识他）</p><p>document.documentElement.scrollTop</p><p>三、火狐/谷歌/ie9+以上支持的</p><p>window.pageYOffset</p><h4 id="4-2-兼容写法"><a href="#4-2-兼容写法" class="headerlink" title="4.2 兼容写法"></a>4.2 兼容写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = <span class="built_in">document</span>.documentElement.scrollTop + <span class="built_in">document</span>.body.scrollTop;</span><br></pre></td></tr></table></figure><h4 id="4-3-事件event"><a href="#4-3-事件event" class="headerlink" title="4.3 事件event"></a>4.3 事件event</h4><h5 id="4-3-1-事件对象的获取（event的获取）"><a href="#4-3-1-事件对象的获取（event的获取）" class="headerlink" title="4.3.1 事件对象的获取（event的获取）"></a>4.3.1 事件对象的获取（event的获取）</h5><p>IE678中，window.event</p><p>在火狐谷歌中，event或者，在事件绑定的函数中，加参，这个参数就是event.</p><p>Box.onclick = function (aaa){ aaa就是event }</p><h5 id="4-3-2-兼容获取方式有两种："><a href="#4-3-2-兼容获取方式有两种：" class="headerlink" title="4.3.2 兼容获取方式有两种："></a>4.3.2 兼容获取方式有两种：</h5><p>不写参数直接使用event;</p><p>写参数，但是为event….var event = event || window.event;(主要用这种)</p><h5 id="4-3-3-event内容重要内容"><a href="#4-3-3-event内容重要内容" class="headerlink" title="4.3.3 event内容重要内容"></a>4.3.3 event内容重要内容</h5><p>PageY/pageX: 鼠标位于整个网页页面的顶部和左侧部分的距离。（页面）</p><p>ScreenY/screenX: 鼠标位于屏幕的上方和左侧的距离。（屏幕）</p><p>ClientX/clientY: 鼠标位于浏览器的左侧和顶部的距离。（浏览器大小和位置）</p><h5 id="4-3-4-PageY和pageX的兼容写法（很重要）"><a href="#4-3-4-PageY和pageX的兼容写法（很重要）" class="headerlink" title="4.3.4 PageY和pageX的兼容写法（很重要）"></a>4.3.4 PageY和pageX的兼容写法（很重要）</h5><p>在页面位置就等于 = 看得见的+看不见的</p><p>pageY/pageX=event.clientY/clientX+scroll().top/scroll().left</p><h2 id="5-client家族"><a href="#5-client家族" class="headerlink" title="5. client家族"></a>5. client家族</h2><h4 id="5-1-主要成员"><a href="#5-1-主要成员" class="headerlink" title="5.1 主要成员"></a>5.1 主要成员</h4><p>1、clientWidth 获取网页可视区域宽度（两种用法）</p><p>clientHeight 获取网页可视区域高度（两种用法）</p><p>调用者不同，意义不同：</p><p>​ 盒子调用： 指盒子本身。</p><p>​ body/html调用： 可视区域大小。</p><p>2、clientX 鼠标距离可视区域左侧距离（event调用）</p><p>clientY 鼠标距离可视区域上侧距离（event调用）</p><p>3、clientTop/clientLeft 盒子的border宽高</p><h4 id="5-2-三大家族区别（三大家族总结）"><a href="#5-2-三大家族区别（三大家族总结）" class="headerlink" title="5.2 三大家族区别（三大家族总结）"></a>5.2 三大家族区别（三大家族总结）</h4><h5 id="5-2-1-Width和height"><a href="#5-2-1-Width和height" class="headerlink" title="5.2.1 Width和height"></a>5.2.1 Width和height</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clientWidth = width + padding</span><br><span class="line"></span><br><span class="line">clientHeight = height + padding</span><br><span class="line"></span><br><span class="line">offsetWidth = width + padding + border</span><br><span class="line"></span><br><span class="line">offsetHeight = height + padding + border</span><br><span class="line"></span><br><span class="line">scrollWidth = 内容宽度（不包含border）width + padding</span><br><span class="line"></span><br><span class="line">scrollHeight = 内容高度（不包含border）</span><br></pre></td></tr></table></figure><h5 id="5-2-1-top和left"><a href="#5-2-1-top和left" class="headerlink" title="5.2.1 top和left"></a>5.2.1 top和left</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">offsetTop/offsetLeft：</span><br><span class="line"></span><br><span class="line">​ 调用者：任意元素。(盒子为主)</span><br><span class="line"></span><br><span class="line">​ 作用：距离父系盒子中带有定位的距离。</span><br><span class="line"></span><br><span class="line">scrollTop/scrollLeft:(盒子也可以调用，必须有滚动条)</span><br><span class="line"></span><br><span class="line">​ 调用者：<span class="built_in">document</span>.body.scrollTop/…..(<span class="built_in">window</span>)</span><br><span class="line"></span><br><span class="line">​ 作用：浏览器无法显示的部分（被卷去的部分）。</span><br><span class="line"></span><br><span class="line">clientY/clientX:（clientTop/clientLeft 值的是border）</span><br><span class="line"></span><br><span class="line">​ 调用者：event.clientX(event)</span><br><span class="line"></span><br><span class="line">​ 作用：鼠标距离浏览器可视区域的距离（左、上）。</span><br><span class="line"></span><br><span class="line"><span class="comment">// width和height</span></span><br><span class="line"><span class="comment">// offset带border</span></span><br><span class="line"><span class="comment">// scroll不带border，内容的宽高</span></span><br><span class="line"><span class="comment">// client不带border</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// top和left</span></span><br><span class="line"><span class="comment">// offset距离父系盒子带有定位的盒子之间的距离</span></span><br><span class="line"><span class="comment">// scroll被卷去的部分的距离</span></span><br><span class="line"><span class="comment">// clientborder的宽高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//clientX和clientY</span></span><br><span class="line"><span class="comment">// event调用，鼠标距离浏览器的可视区域的距离</span></span><br></pre></td></tr></table></figure><h4 id="5-3-Onresize事件"><a href="#5-3-Onresize事件" class="headerlink" title="5.3  Onresize事件"></a>5.3  Onresize事件</h4><p>只要浏览器的大小改变，哪怕1像素，都会触动这个事件。</p><h4 id="5-4-事件总结"><a href="#5-4-事件总结" class="headerlink" title="5.4  事件总结"></a>5.4  事件总结</h4><p>区分：</p><p>1.window.onscroll 屏幕滑动</p><p>2.window.onresize 浏览器大小变化</p><p>3.window.onload 页面加载完毕</p><p>4.div.onmousemove 鼠标在盒子上移动</p><p>​ （注意：不是盒子移动！！！）</p><p>5.onmouseup/onmousedown == onclick</p><h4 id="5-5-获得屏幕宽高"><a href="#5-5-获得屏幕宽高" class="headerlink" title="5.5  获得屏幕宽高"></a>5.5  获得屏幕宽高</h4><p>window.screen.width</p><p>分辨率是屏幕图像的精密度，指显示器所能显示的像素有多少。</p><p>我们的电脑一般：</p><p>横向1280个像素点，</p><p>纵向960个像素点。</p><p>我们看电影的时候是满屏和半屏的，就是这。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-三大家族和一个事件对象&quot;&gt;&lt;a href=&quot;#1-三大家族和一个事件对象&quot; class=&quot;headerlink&quot; title=&quot;1. 三大家族和一个事件对象&quot;&gt;&lt;/a&gt;1. 三大家族和一个事件对象&lt;/h2&gt;&lt;p&gt;三大家族（offset/scroll/clien</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>去重算法</title>
    <link href="http://example.com/2020/03/09/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2020/03/09/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/</id>
    <published>2020-03-09T01:31:24.000Z</published>
    <updated>2021-03-11T11:08:28.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-遍历数组法"><a href="#1-遍历数组法" class="headerlink" title="1.遍历数组法"></a>1.遍历数组法</h3><p>它是最简单的数组去重方法（indexOf方法）</p><p>实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(hash.indexOf(arr[i])==-<span class="number">1</span>)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数组下标判断法"><a href="#2-数组下标判断法" class="headerlink" title="2.数组下标判断法"></a>2.数组下标判断法</h3><p>调用indexOf方法，性能和方法1差不多</p><p>实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr.indexOf(arr[i])==i)&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-排序后相邻去除法"><a href="#3-排序后相邻去除法" class="headerlink" title="3.排序后相邻去除法"></a>3.排序后相邻去除法</h3><p>实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  arr.sort();</span><br><span class="line">  <span class="keyword">var</span> hash=[arr[<span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[i]!=hash[hash.length-<span class="number">1</span>])&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-优化遍历数组法"><a href="#4-优化遍历数组法" class="headerlink" title="4.优化遍历数组法"></a>4.优化遍历数组法</h3><p>实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length</p><p>将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）</p><p>quan_lst 里面是一个一个的js字面量对象，根据json里面的属性进行判定去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">quan_lst</span>)</span>&#123;    </span><br><span class="line"><span class="comment">//去掉重复选取的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; quan_lst.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j =i+<span class="number">1</span>; j &lt;quan_lst.length; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (quan_lst[i].photoid == quan_lst[j].photoid ) &#123;<span class="comment">//通过photoid属性进行匹配；</span></span><br><span class="line">                quan_lst.splice(j, <span class="number">1</span>);<span class="comment">//去除重复的对象；</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ES6实现"><a href="#5-ES6实现" class="headerlink" title="5.ES6实现"></a>5.ES6实现</h3><p>基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique5</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"> <span class="keyword">return</span> [...x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：如果重复，则去掉该元素</p><p>数组下标去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique22</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr.indexOf(arr[i])==arr.lastIndexOf(arr[i]))&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：原先自己一直以为indexOf是针对字符串，原来indexOf也可以查询出数组元素所在的数组中的位置(以0开始计算),</p><h3 id="6-ES6实现（第二种方式）"><a href="#6-ES6实现（第二种方式）" class="headerlink" title="6.ES6实现（第二种方式）"></a>6.ES6实现（第二种方式）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1,8,12,15,16]</span></span><br></pre></td></tr></table></figure><h3 id="7-利用includes"><a href="#7-利用includes" class="headerlink" title="7.利用includes"></a>7.利用includes</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">16</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(‘type error!’)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array =[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( !array.includes( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">array.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure><h3 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8.利用filter"></a>8.利用filter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">16</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unlink</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line"><span class="keyword">return</span> arr.indexOf(item, <span class="number">0</span>) === index;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unlink(arr));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-遍历数组法&quot;&gt;&lt;a href=&quot;#1-遍历数组法&quot; class=&quot;headerlink&quot; title=&quot;1.遍历数组法&quot;&gt;&lt;/a&gt;1.遍历数组法&lt;/h3&gt;&lt;p&gt;它是最简单的数组去重方法（indexOf方法）&lt;/p&gt;
&lt;p&gt;实现思路：新建一个数组，遍历去要重的数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue中路由跳转view却不更新的问题与解决办法</title>
    <link href="http://example.com/2020/03/08/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2020/03/08/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%ACview%E5%8D%B4%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-03-08T11:43:41.000Z</published>
    <updated>2021-03-11T11:06:11.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue中路由跳转view却不更新的问题与解决办法"><a href="#vue中路由跳转view却不更新的问题与解决办法" class="headerlink" title="vue中路由跳转view却不更新的问题与解决办法"></a>vue中路由跳转view却不更新的问题与解决办法</h1><p><strong>一般情况下路由从/myrouter跳转至/yourrouter时，view会发生更新。</strong><br>情况如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.js</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&quot;/products/:id&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;product&quot;</span>,</span><br><span class="line">    components: Product</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在路由/products/:id对应一个组件Product.vue,组件中有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;test1&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.init(<span class="built_in">this</span>.$router.history.current.params.id);</span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">init</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.msg = <span class="built_in">this</span>.$router.history.current.params.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>为什么上述情况会导致view不更新呢？<br>答：由于router-view是复用的，单纯的改变id号并不会刷新router-view。追根揭底就是因为data没有变化，只要路由跳转时触发 init() 函数来改变data就可以了。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li><p>用 :key 来阻止“复用”<br>在父组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key=<span class="string">&quot;key&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">key</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$route.name !== <span class="literal">undefined</span>? <span class="built_in">this</span>.$route.name +<span class="keyword">new</span> <span class="built_in">Date</span>(): <span class="built_in">this</span>.$route +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种办法实质上是让每次路由跳转时重新构建该组件，我们在它的生命周期中写一个打印语句就能看出来。</p></li><li><p>通过 watch 监听路由<br>在子组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; <span class="comment">//通过watch来监听路由变化</span></span><br><span class="line"> <span class="string">&#x27;$route&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.init(<span class="built_in">this</span>.$router.history.current.params.id);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 vue-router的钩子函数 beforeRouteEnter beforeRouteUpdate beforeRouteLeave</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">   <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">   <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">   <span class="comment">// 因为当钩子执行前，组件实例还没被创建</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">   <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">   <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">   <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">   <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">   <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">   <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue中路由跳转view却不更新的问题与解决办法&quot;&gt;&lt;a href=&quot;#vue中路由跳转view却不更新的问题与解决办法&quot; class=&quot;headerlink&quot; title=&quot;vue中路由跳转view却不更新的问题与解决办法&quot;&gt;&lt;/a&gt;vue中路由跳转view却不</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://example.com/2019/10/12/AJAX/"/>
    <id>http://example.com/2019/10/12/AJAX/</id>
    <published>2019-10-12T10:38:45.000Z</published>
    <updated>2021-03-11T11:25:01.876Z</updated>
    
    <content type="html"><![CDATA[<p>Ajax（Asynchronous JavaScript and XML的缩写）是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。</p><br><br><p>AJAX的好处：可以通过js代码发送get或者post的请求去从后台获取到相应数据，并只对页面中的部分标签进行刷新渲染，而不需要刷新整个页面，节约了带宽，优化了性能。</p><br><h2 id="创建AJAX对象"><a href="#创建AJAX对象" class="headerlink" title="创建AJAX对象"></a>创建AJAX对象</h2><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兼容性写法  ActiveXObject(&#x27;Microsoft.XMLHTTP&#x27;);是为了兼容IE5 IE6</span></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br></pre></td></tr></table></figure><br><h2 id="AJAX的方法"><a href="#AJAX的方法" class="headerlink" title="AJAX的方法"></a>AJAX的方法</h2><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求方式</span></span><br><span class="line">ajax.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;url&quot;</span>,<span class="literal">true</span>);  <span class="comment">//第三个参数如果为true，则是异步，反之同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置请求头格式（post请求时一定要加请求头，这是因为在传输过程中会出现转码的情况，可能导致乱码的情况）</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求:get请求参数放在url后面，post请求参数send()方法里面</span></span><br><span class="line">ajax.send(<span class="string">&quot;数据&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//监听ajax状态，当ajax的状态发生改变的时候执行</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//响应完成，浏览器已经可以获取到服务器响应结果了</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">4</span>)&#123;  <span class="comment">//这是AJAX的状态码 区别与http的状态码 状态码还有 1 2 3 其中3是数据正在传输时的状态，他不保证数据的完整性</span></span><br><span class="line">        <span class="comment">//http响应的状态码</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.state == <span class="number">200</span>)&#123;  <span class="comment">//还有302  301  404...</span></span><br><span class="line">            <span class="comment">//获取响应内容</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText); <span class="comment">//用ajax.responseText获取服务器返回的数据</span></span><br><span class="line">            <span class="comment">//responseText 获得字符串形式的响应数据。</span></span><br><span class="line">   <span class="comment">//responseXML 获得XML 形式的响应数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="数据渲染的两种方式"><a href="#数据渲染的两种方式" class="headerlink" title="数据渲染的两种方式"></a>数据渲染的两种方式</h2><br><p>数据在服务器中渲染完毕，返回给客户端一个完整页面</p><br><p>1.浏览器发送请求至服务器<br>2.服务器接收到请求的信息，根据请求找到相应的信息（如JSON数据），在读取相应的页面文件，并渲染成一个完整的页面，将这个页面返回给客户端<br>3.客户端接收到此页面，并显示 (此方式要在服务器端安装art-template express-art-template等第三方模板）</p><br><p>服务器只返回相应的数据，客户端接收到数据后，在客户端进行渲染，并显示</p><br><p>1.客户端发送数据请求给服务器<br>2.服务器拿到请求，找到相应的数据（如JSON），直接将此数据返回给客户端<br>3.客户端拿到数据后，在客户端进行渲染，并显示。（此方式要用到前端渲染插件template-web.js）</p><br><br><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><br><p>XML extensible Markup Language 扩展的标记语言，XML的标签可以自定义<br>HTML Hyper Text Markup Lanaguage HTML的标签是由W3C规范的，大概一共200多个</p><br><h3 id="XML用途："><a href="#XML用途：" class="headerlink" title="XML用途："></a>XML用途：</h3><br><p>1、 定义数据结构<br>2、 作为配置文件出现</p><br><h3 id="XML组成："><a href="#XML组成：" class="headerlink" title="XML组成："></a>XML组成：</h3><br><p>1、 XML文档声明<br>2、 XML标签<br>3、 XML属性<br>4、 XML注释</p><br><h3 id="XML文档注意点："><a href="#XML文档注意点：" class="headerlink" title="XML文档注意点："></a>XML文档注意点：</h3><br><p>1）xml的标签必须成对出现如，为成对出现时的标签也必须要是自关闭标签 如<br>2）xml标签名称区分大小写。<br>3）xml标签一定要正确配对。<br>4）xml标签名中间不能使用空格<br>5）xml标签名不能以数字开头<br>6）注意： 在一个xml文档中，有且仅有一个根标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//使用xml设计一个通讯录</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contact</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">phone</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">email</span>&gt;</span>12453@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span>=<span class="string">&quot;101&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">phone</span>&gt;</span>22345678<span class="tag">&lt;/<span class="name">phone</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">email</span>&gt;</span>34453@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contact</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="xml的使用"><a href="#xml的使用" class="headerlink" title="xml的使用"></a>xml的使用</h3><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器代码</span></span><br><span class="line"><span class="comment">//返回XML格式的数据</span></span><br><span class="line">app.get(<span class="string">&quot;/getXML&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//设置响应头，指定返回的数据是XML</span></span><br><span class="line">res.header(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xml =  <span class="string">&#x27;&lt;?xml version=&quot;1.1&quot; encoding=&quot;utf-8&quot;?&gt;&#x27;</span>;<span class="comment">//XML文档声明</span></span><br><span class="line">xml += <span class="string">&#x27;&lt;person&gt;&#x27;</span>;</span><br><span class="line">xml += <span class="string">&#x27;&lt;name&gt;羊杨&lt;/name&gt;&#x27;</span>;</span><br><span class="line">xml += <span class="string">&#x27;&lt;age&gt;16&lt;/age&gt;&#x27;</span>;</span><br><span class="line">xml += <span class="string">&#x27;&lt;gender&gt;男&lt;/gender&gt;&#x27;</span>;</span><br><span class="line">xml += <span class="string">&#x27;&lt;/person&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">res.send(xml);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="comment">//获取响应的XML数据</span></span><br><span class="line"><span class="keyword">var</span> xml = <span class="built_in">this</span>.responseXML.documentElement;<span class="comment">//ajax.responseXML.documentElement拿到文档数据</span></span><br><span class="line"><span class="keyword">var</span> age = xml.querySelector(<span class="string">&quot;age&quot;</span>);<span class="comment">//用标签选择器获取到age数据  但此时age是&lt;age&gt;16&lt;/age&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(age.innerHTML);<span class="comment">//此处用innerText拿不到数据</span></span><br><span class="line"><span class="built_in">console</span>.log(xml.children);<span class="comment">//xml的语法几乎与html语法类似</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><br><p>json数据的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器代码</span></span><br><span class="line"><span class="comment">//返回JSON格式的数据</span></span><br><span class="line">app.get(<span class="string">&quot;/getJSON&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">&#123;</span><br><span class="line">name:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">age:<span class="string">&quot;18&quot;</span>,</span><br><span class="line">gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">id:<span class="number">001</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name:<span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">age:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">id:<span class="number">002</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//将数组转换为JSON数据</span></span><br><span class="line">res.status(<span class="number">200</span>).send(<span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText); <span class="comment">//这是JSON字符串，在使用的时候往往需要转换为对象</span></span><br><span class="line"><span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line"><span class="keyword">var</span> html = template(<span class="string">&quot;generatorTable&quot;</span>,&#123;<span class="attr">students</span>:students&#125;);</span><br><span class="line">container.innerHTML = html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="jQuery中的AJAX"><a href="#jQuery中的AJAX" class="headerlink" title="jQuery中的AJAX"></a>jQuery中的AJAX</h2><br><p>推荐使用 方便的一批</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><br><p>客户端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    type:<span class="string">&quot;get&quot;</span>, <span class="comment">//post</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求路径</span></span><br><span class="line">    url:<span class="string">&quot;&quot;</span>, <span class="comment">//如http://localhost:3000/index</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//请求参数，无论是get还是post请求，请求参数都可以写在这里</span></span><br><span class="line">    <span class="comment">//注意：请求为get时  在服务器得到请求参数时 仍然使用res.query</span></span><br><span class="line">    <span class="comment">//这里的data数据必须为字符串 若要传入json数据 需要将json数据转换为字符串如 JSON.stringify(&#123;[&#123;&#125;,&#123;&#125;]&#125;)</span></span><br><span class="line">    data:&#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//规定所要请求的数据的类型</span></span><br><span class="line">    dataType: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在jQuery中如果请求已经是post，默认的contentType就是application/x-www-form-urlencoded,不需要单独再去写</span></span><br><span class="line">    <span class="comment">//contentType: &quot;application/x-www-form-urlencoded&quot;,</span></span><br><span class="line">    <span class="comment">//请求成功的回调</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);<span class="comment">//res是请求的到的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请求出错的回调 推荐写</span></span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//无论请求的成功与否，只要请求结束都会执行此函数</span></span><br><span class="line">complete:<span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><p>服务器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"><span class="comment">//注意 当客户端中的data:JSON.stringify([&#123;name:&#x27;zhangsan&#x27;&#125;,&#123;name:&#x27;lisi&#x27;&#125;])时，服务器需要此配置</span></span><br><span class="line"><span class="comment">//以解析body中的json数据</span></span><br><span class="line">app.use(bodyParser.json(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">&quot;./views&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//当ajax的url为&#x27;/getJSON&#x27;时 此接口响应 返回JSON格式的数据</span></span><br><span class="line"><span class="comment">//此时ajax的dataType要设置为&#x27;json&#x27;</span></span><br><span class="line">app.get(<span class="string">&quot;/getJSON&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = [</span><br><span class="line">        &#123;</span><br><span class="line">            name:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            age:<span class="string">&quot;18&quot;</span>,</span><br><span class="line">            gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">            id:<span class="number">001</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name:<span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">            age:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">            gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">            id:<span class="number">002</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    arr.forEach((user,idx)=&#123;</span><br><span class="line">        <span class="keyword">if</span>(user.name == req.body.name)&#123;</span><br><span class="line">            res.status(<span class="number">200</span>).send(<span class="built_in">JSON</span>.stringify(user));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//当ajax的url为&#x27;/getXML&#x27;时 此接口响应 返回XML格式的数据</span></span><br><span class="line"><span class="comment">//此时ajax的dataType要设置为&#x27;xml&#x27;</span></span><br><span class="line">app.get(<span class="string">&quot;/getXML&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头，指定返回的数据是XML</span></span><br><span class="line">    res.header(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xml =  <span class="string">&#x27;&lt;?xml version=&quot;1.1&quot; encoding=&quot;utf-8&quot;?&gt;&#x27;</span>;</span><br><span class="line">    xml += <span class="string">&#x27;&lt;person&gt;&#x27;</span>;</span><br><span class="line">    xml += <span class="string">&#x27;&lt;name&gt;zhangsan&lt;/name&gt;&#x27;</span>;</span><br><span class="line">    xml += <span class="string">&#x27;&lt;age&gt;16&lt;/age&gt;&#x27;</span>;</span><br><span class="line">    xml += <span class="string">&#x27;&lt;gender&gt;男&lt;/gender&gt;&#x27;</span>;</span><br><span class="line">    xml += <span class="string">&#x27;&lt;/person&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    res.send(xml);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><br><p>发送也接受html或script数据</p><br><p>服务器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/getScript&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.header(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/javascript;charset=utf-8&#x27;</span>);</span><br><span class="line">    res.send(<span class="string">&#x27;alert(123);&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/getHtml&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    res.header(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.send(<span class="string">&#x27;&lt;h1&gt;HTML&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><p>客户端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn1&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;/getHtml&#x27;</span>,</span><br><span class="line">        data: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        dataType: <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//因为dataType为html  jQuery。AJAX会自动设置响应头为text/html  则 可以直接追加res到页面中</span></span><br><span class="line">            $(<span class="string">&#x27;#info&#x27;</span>).append(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#btn2&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;/getScript&#x27;</span>,</span><br><span class="line">        data: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        dataType: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//之所以alert()能执行  是因为将script代码打印到控制台  控制台会执行script代码</span></span><br><span class="line">            <span class="comment">//也可以用script标签的对res进行封装 追加到页面中 也可以执行</span></span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h3 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h3><br><p>dataType取值有xml、html、json、jsonp、script或者text</p><br><p>当dataType取值为json，会自动将服务器返回的文本数据通过JSON.parse()转换成对象。<br>服务器应该设置这个响应头：res.header(“content-type”, “application/json;charset=utf-8”);</p><br><p>当dataType为xml或者text的时候，返回的数据不会另做处理<br>服务器应该设置这个响应头：res.header(“content-type”,”application/xml”);<br>res.header(“content-type”,”text/plain;charset=utf-8”);</p><br><p>当dataType为html的时候，返回的内容中的script标签会在网页内容被拼接到页面的时候执行<br>服务器应该设置这个响应头：res.header(“content-type”,”text/html;charset=utf-8”);</p><br><p>当dataType为script的时候，会将服务器返回的结果当成js代码执行并且将js代码的文本内容返回给客户端</p><p>服务器应该设置这个响应头：res.header(“content-type”,”application/javascript”);</p><br><p>当dataType为jsonp的时候，会向服务器发送一个jsonp请求<br>服务器应该设置这个响应头：res.header(“content-type”,”application/javascript”);</p><br><br><h2 id="nprogress的使用（全局事件处理）"><a href="#nprogress的使用（全局事件处理）" class="headerlink" title="nprogress的使用（全局事件处理）"></a>nprogress的使用（全局事件处理）</h2><p>1、在html文件中引入nprogress.js 和 nprogress.css</p><br><p>2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//请求数据开始</span></span><br><span class="line">    NProgress.start();<span class="comment">//数据加载动画</span></span><br><span class="line">&#125;).ajaxStop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//请求数据结束</span></span><br><span class="line">    NProgress.done();<span class="comment">//数据加载完毕动画</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><br><p>同源策略是浏览器的一种安全策略，所谓同源是指 域名，协议，端口完全相同 ，只有同源的地址才可以相互通过AJAX的方式请求。</p><br><p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为跨域请求</p><br><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000  是不可以通过ajax访问  http:&#x2F;&#x2F;locally.uieee.com&#x2F;categories的</span><br><span class="line">因为两者不满足同源的条件</span><br></pre></td></tr></table></figure><br><h3 id="如何进行跨域请求"><a href="#如何进行跨域请求" class="headerlink" title="如何进行跨域请求"></a>如何进行跨域请求</h3><p><br>1.CORS</p><p><br>2.JSONP</p><p><br>3.代理服务器</p><br><p>4.修改document.domain</p><p><br>5.Iframe</p><p><br>6.Location.hash</p><p><br>7.Window.postMessage()</p><p><br>8.Websocket</p><br><br><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><br><p>只需要改动服务器，不用改动客户端代码，客户端可以直接使用$.ajax()</p><br><p>Cross Origin Resource Share，跨域资源共享。这种方案无需客户端作出任何变化（客户端不用改代码），只是在被请求的服务端响应的时候添加一个Access- Control-Allow-Origin 的响应头，表示这个资源是否允许指定域请求。</p><br><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><br><p>JSON with Padding 实质上是通过script的src属性进行数据请求。本质上不是AJAX请求</p><br><p>需要服务器和客户端配合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时客户端的地址为http://localhost:3000</span></span><br><span class="line">实现要点</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.src = <span class="string">&#x27;http://localhost:9999/testJSONP&#x27;</span>;<span class="comment">//向http://localhost:9999发送跨域请求</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器代码</span></span><br><span class="line">app.get(<span class="string">&quot;/testJSONP&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//设置响应头 服务器给客户端发送了一个js代码块</span></span><br><span class="line">res.header(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;application/javascript&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">JSON</span>.stringify(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;) ;</span><br><span class="line"><span class="comment">//服务器发送 `foo(&#x27;&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;&#x27;)` 这个字符串给客户端</span></span><br><span class="line">res.send(<span class="string">`foo(<span class="subst">$&#123;data&#125;</span>)`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//如果服务器给客户端返回的js代码块中有函数调用，必须提前在客户端中声明要调用的那个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>jQuery代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    url:<span class="string">&quot;http://localhost:9999/testJSONP&quot;</span>,</span><br><span class="line">    data:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    dataType: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;body&#x27;</span>).append(res);</span><br><span class="line">    &#125;</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">complete:<span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器http://localhost:3000代码</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器http://localhost:8888代码</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/getJsonp&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;foo(&quot;你拿到了http://localhost:8888的jsonp&quot;);&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8888</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><br><p>AJAX是通过XMLHttpRequest或者封装后的框架进行网络请求，由于这种方式的配置和调用方式非常混乱，已被Fetch取代</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ajax（Asynchronous JavaScript and XML的缩写）是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="新技术" scheme="http://example.com/tags/%E6%96%B0%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>npm和yarn</title>
    <link href="http://example.com/2019/08/20/npm%E5%92%8Cyarn/"/>
    <id>http://example.com/2019/08/20/npm%E5%92%8Cyarn/</id>
    <published>2019-08-20T10:00:45.000Z</published>
    <updated>2021-03-11T11:27:17.266Z</updated>
    
    <content type="html"><![CDATA[<p>Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如<a href="https://link.jianshu.com/?t=http://link.zhihu.com/?target=https://code.facebook.com/posts/1840075619545360">官方文档</a>中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。</p><br><br><br><h2 id="一-npm常用的命令"><a href="#一-npm常用的命令" class="headerlink" title="一.npm常用的命令"></a>一.npm常用的命令</h2><br><p>全局安装：默认安装在Node.js环境的node_modules目录下，全局安装的包一般用于命令行工具</p><p>本地安装：一般用于开发某种具体的功能</p><br><p>1、安装包（若不指定版本号 默认安装最新版本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g 安装包名称     （全局安装）</span><br><span class="line"></span><br><span class="line">npm install 安装包名称      （本地安装）</span><br><span class="line"></span><br><span class="line">例： npm install es-checker     &#x2F;&#x2F;安装es6</span><br></pre></td></tr></table></figure><br><p>2、卸载包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g 安装包名称     （全局卸载）</span><br><span class="line"></span><br><span class="line">npm uninstall 安装包名称      （本地卸载）</span><br><span class="line"></span><br><span class="line">例： npm uninstall es-checker     &#x2F;&#x2F;卸载es6</span><br></pre></td></tr></table></figure><br><p>3、更新包 （更新到最新版本号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm updata -g 安装包名称</span><br></pre></td></tr></table></figure><br><p>4、添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--save   （向生产环境添加依赖） 生产环境是项目部署上线之后的服务器环境</span><br><span class="line"></span><br><span class="line">--save-dev   （向开发环境添加依赖） 开发环境是平时开发使用的环境</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;例子：npm install es-checker --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;例子：npm install es-checker --save-dev</span><br></pre></td></tr></table></figure><br><p>安装服务器自动重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><br><h2 id="二-npm安装包的步骤"><a href="#二-npm安装包的步骤" class="headerlink" title="二.npm安装包的步骤"></a>二.npm安装包的步骤</h2><br><p>1、初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init &#x2F;&#x2F;初始化 生成package.json文件</span><br></pre></td></tr></table></figure><br><p>2、安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 安装包名称      （本地安装）</span><br></pre></td></tr></table></figure><br><p>3、若存在package.json文件 和 package-lock.json文件，恢复安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><br><br><h2 id="三-Yarn"><a href="#三-Yarn" class="headerlink" title="三.Yarn"></a>三.Yarn</h2><br><p>安装yarn工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><br><br><h2 id="四-yarn中的命令"><a href="#四-yarn中的命令" class="headerlink" title="四.yarn中的命令"></a>四.yarn中的命令</h2><br><p>1、初始化包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init  &#x2F;&#x2F;npm中的初始化方式</span><br><span class="line"></span><br><span class="line">yarn init  &#x2F;&#x2F;yarn中初始化方式</span><br></pre></td></tr></table></figure><br><p>2、安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx --save &#x2F;&#x2F;npm中的安装方式</span><br><span class="line"></span><br><span class="line">yarn add xxx  &#x2F;&#x2F;yarn中的安装方式</span><br></pre></td></tr></table></figure><br><p>3、移除包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall xxx  &#x2F;&#x2F;npm中的移除方式</span><br><span class="line"></span><br><span class="line">yarn remove xxx  &#x2F;&#x2F;yarn中的移除方式</span><br></pre></td></tr></table></figure><br><p>4、更新包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm update xxx</span><br><span class="line"></span><br><span class="line">yarn upgrade xxx</span><br></pre></td></tr></table></figure><br><p>5、安装开发依赖的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx --save-dev</span><br><span class="line"></span><br><span class="line">yarn  add xxx --dev</span><br></pre></td></tr></table></figure><br><p>6、全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g xxx</span><br><span class="line"></span><br><span class="line">yarn globar add xxx</span><br></pre></td></tr></table></figure><br><p>7、设置下载镜像的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry url</span><br><span class="line"></span><br><span class="line">yarn config set registry url</span><br></pre></td></tr></table></figure><br><p>8、安装所有依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><br><p>9、执行包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run</span><br><span class="line"></span><br><span class="line">yarn run</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="五-切换源"><a href="#五-切换源" class="headerlink" title="五.切换源"></a>五.切换源</h2><br><p>安装nrm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nrm</span><br></pre></td></tr></table></figure><br><p>查看源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure><br><p>切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如&lt;a href=&quot;https://link.jianshu.com/?t=http://link.zhihu.com/?target=https://c</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题美化</title>
    <link href="http://example.com/2018/07/20/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <id>http://example.com/2018/07/20/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</id>
    <published>2018-07-20T10:00:45.000Z</published>
    <updated>2021-03-11T11:26:24.440Z</updated>
    
    <content type="html"><![CDATA[<p>上期我们使用hexo和git进行了个人博客的基础搭建，搭建好的博客虽然已具备基本的使用功能但在页面美化和功能上还是有很多的不足，今天我给大家分享一下hexo博客的主题美化。</p><br><br><h2 id="一-更换主题"><a href="#一-更换主题" class="headerlink" title="一.更换主题"></a>一.更换主题</h2><br><p>为了让它看起来更美观一些，我们可以为其更换主题（当然也可以自己在默认主</p><p> 题下自己编写美化博客界面）。这里以使用github上的next主题为例：</p><br><h3 id="1-创建next文件夹"><a href="#1-创建next文件夹" class="headerlink" title="1.创建next文件夹"></a>1.创建next文件夹</h3><br><p>切换到本地博客根目录下，在主题文件thems下创建一个新文件夹next存放即将下载的next主题(git bash)</p><br><h3 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2.下载主题"></a>2.下载主题</h3><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next        &#x2F;&#x2F;下载主题</span><br></pre></td></tr></table></figure><p>下载成之后我们会看到next的主题已经存在thems里了如下：</p><p><img src="https://p.130014.xyz/2021/03/10/121b0ff45f2a25754.png"></p><br><h3 id="3-修改博客配置文件，更换主题配置"><a href="#3-修改博客配置文件，更换主题配置" class="headerlink" title="3.修改博客配置文件，更换主题配置"></a>3.修改博客配置文件，更换主题配置</h3><br><p>修改博客根目录(不是next主题)下的_config.yml文件，搜索theme字段，并将其值修改为next</p><p><img src="https://p.130014.xyz/2021/03/10/186165491ac1c3a1a.png"></p><br><p>然后在控制台（git bash）下输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   &#x2F;&#x2F;清理缓存</span><br><span class="line">hexo g       &#x2F;&#x2F;重新生成博客代码 </span><br><span class="line">hexo d       &#x2F;&#x2F;部署到本地</span><br></pre></td></tr></table></figure><p>再次打开我们的博客网站<a href="https://dreamcoffeezs.github.io/">https://UserName.github.io</a>，将会看到更换主题后</p><p><img src="https://p.130014.xyz/2021/03/10/16a5f77e04e2550ef.png"></p><p><a href="https://hexo.io/themes/">更多主题美化</a></p><br><br><h2 id="二-Live2D看板娘"><a href="#二-Live2D看板娘" class="headerlink" title="二.Live2D看板娘"></a>二.Live2D看板娘</h2><br><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>安装过程中可能遇到一些依赖性问题，按提示做就行</p><p><img src="https://img-blog.csdnimg.cn/20200129105235873.png"></p><p>遇到这种就运行<code>npm audit fix</code>，如果还不成功，会提示你用<code>npm audit fix --force</code>，一般这个时候就成功了。<br>成功了之后可以看到当前目录的<code>node_modules/</code>下有个<code>live2d-widget</code>目录，这是动画的主配置：</p><p><img src="https://img-blog.csdnimg.cn/2020012910571945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MjM5NTY5,size_16,color_FFFFFF,t_70"></p><p>这个时候是没有模型文件的，所以下一步是下载模型文件</p><br><h3 id="2-下载model文件"><a href="#2-下载model文件" class="headerlink" title="2.下载model文件"></a>2.下载model文件</h3><br><p>下载模型文件：<br>模型文件可直接用npm安装：如下<br>npm install live2d-widget-model-shizuku</p><p><br>安装完成可以在node_modules/下看到live2d-widget-model-shizuku文件夹</p><p><img src="https://img-blog.csdnimg.cn/20200129110058553.png"></p><h3 id="3-添加live2d看板娘到hexo"><a href="#3-添加live2d看板娘到hexo" class="headerlink" title="3.添加live2d看板娘到hexo"></a>3.添加live2d看板娘到hexo</h3><p>配置Hexo的主<code>_config.yml</code></p><p>添加以下代码到配置文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## Live2D看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  model:</span><br><span class="line">    #模板目录，在node_modules里</span><br><span class="line">    use: live2d-widget-model-shizuku  </span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 300 </span><br><span class="line">    height: 600</span><br><span class="line">  mobile:</span><br><span class="line">    # 在手机端显示</span><br><span class="line">    show: false   </span><br><span class="line">  rect:</span><br><span class="line">    opacity:0.7</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上期我们使用hexo和git进行了个人博客的基础搭建，搭建好的博客虽然已具备基本的使用功能但在页面美化和功能上还是有很多的不足，今天我给大家分享一下hexo博客的主题美化。&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;一-更换主题&quot;&gt;&lt;a href=&quot;#一-更换主题&quot; </summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo和Git搭建个人博客</title>
    <link href="http://example.com/2018/07/12/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGit%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2018/07/12/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGit%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2018-07-12T10:38:45.000Z</published>
    <updated>2021-03-11T11:28:02.401Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。</p><br><br><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><br><h3 id="1-了解Hexo"><a href="#1-了解Hexo" class="headerlink" title="1.了解Hexo"></a>1.了解Hexo</h3><p><a href="https://github.com/hexojs/hexo">Hexo</a>是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以使用 Markdown 编写文章</p><br><h3 id="2-搭建Node-js环境"><a href="#2-搭建Node-js环境" class="headerlink" title="2.搭建Node.js环境"></a>2.搭建Node.js环境</h3><p>搭建博客网站首先需要安装Node.js环境。</p><p><a href="http://nodejs.cn/download">下载地址</a></p><p>测试安装：命令行使用node -v 、npm -v，查看显示版本号即成功。</p><p><strong>Ps:如果装的node版本是5.0.0+的， hexo的初始化步骤中会出现报错，需要重新装较新的版本（10.0.0+）</strong></p><br><h3 id="3-安装Hexo博客框架工具"><a href="#3-安装Hexo博客框架工具" class="headerlink" title="3. 安装Hexo博客框架工具"></a>3. 安装Hexo博客框架工具</h3><p>Hexo是一个建站工具，可以帮助我们快速生成基本的博客文件，安装它需要在</p><p>控制台下（cmd）使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli –g</span><br></pre></td></tr></table></figure><br><h3 id="4-安装Git版本工具"><a href="#4-安装Git版本工具" class="headerlink" title="4.安装Git版本工具"></a>4.安装Git版本工具</h3><p>Git是目前世界上最流行的分布式版本控制系统</p><p>使用Git可以帮助我们把本地的网页和文章等内容提交到Github上，实现同步。 </p><p><a href="https://git-scm.com/downloads">下载地址</a></p><p>测试安装:右击鼠标，如果有<strong>git bash</strong>等两个选项 即安装成功。</p><br><h3 id="5-注册Github账号"><a href="#5-注册Github账号" class="headerlink" title="5.注册Github账号"></a>5.注册Github账号</h3><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。这里用到Github，是因为我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件。 </p><p><a href="https://github.com/">注册地址</a></p><br><h2 id="二、开始搭建博客"><a href="#二、开始搭建博客" class="headerlink" title="二、开始搭建博客"></a>二、开始搭建博客</h2><br><h3 id="1-开启GitHub服务"><a href="#1-开启GitHub服务" class="headerlink" title="1. 开启GitHub服务"></a>1. 开启GitHub服务</h3><p>通过Github Pages获得一个免费使用的域名，这需要我们在Github上新建一个仓库，如下：</p><p><img src="https://p.130014.xyz/2021/03/10/1.png"></p><p>新仓库的名字，最好是是UserName+“github.io”的形式。这也是之前强调的要起一个好的用户名的原因。这样之后我们最后的博客网站的链接就会是：<a href="https://username.github.io的形式/">https://UserName.github.io的形式</a></p><p>注意：固定新仓库的名字格式并非必须，只是这样操作生成的博客域名比较短小简洁，另起他名生成博客域名会很冗长</p><p>点击Create Repository之后，随后选择Setting进入设置，找到Github Pages如下：</p><p><img src="https://p.130014.xyz/2021/03/10/1732921df50fedf88.png"></p><p>这里我们需要点击Choose a theme任意选择一个选择主题，然后界面会跳转到仓库，我们看到有两个文件如下：</p><p><img src="https://p.130014.xyz/2021/03/10/1ccedcc9a4a0c76ae.png"></p><p>再查看setting，我们会看到开启GitHub Pages之后得到的域名如下：</p><p><img src="https://p.130014.xyz/2021/03/10/192aebc44e11eaa32.png"></p><p>现在，可以使用<a href="https://dreamcoffeezs.github.io/">https://UserName.github.io</a>，访问自己的博客网站了，打开链接我们会看到默认主题的个人博客样式如下(虽然点丑)：</p><p><img src="https://p.130014.xyz/2021/03/10/11cf92f581c17c7cb.png"></p><br><h3 id="2-创建本地博客站点"><a href="#2-创建本地博客站点" class="headerlink" title="2.创建本地博客站点"></a>2.创建本地博客站点</h3><p>上述的步骤相当于我们使用Github，创建了一个默认的博客页，并且得到了一个可外部访问的域名。但是这个博客页很丑。我们的目的是创建自己个性化的博客网站，所以我们使用Hexo在本地先创建一个本地博客站点，优化后再把它部署到github上。接下来我们使用控制台(cmd)命令在本地一个合适的位置创建博客站点文件夹如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myHexoBlog    &#x2F;&#x2F;myHexoBlog是项目名</span><br></pre></td></tr></table></figure><p><img src="https://p.130014.xyz/2021/03/10/2.png"></p><p>测试本地博客站点，在本地博客根目录(git bash)下使用控制台命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   &#x2F;&#x2F;g是generetor的缩写，生成博客 </span><br><span class="line">hexo s   &#x2F;&#x2F;s是server的缩写，启动服务</span><br></pre></td></tr></table></figure><p>此时打开浏览器，输入 <a href="http://localhost:4000/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%86%E4%BC%9A%E7%9C%8B%E5%88%B0Hexo%E8%87%AA%E5%B8%A6%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E6%98%BE%E7%A4%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A0%B7%E5%BC%8F%E5%A6%82%E4%B8%8B">http://localhost:4000/，我们将会看到Hexo自带默认主题显示的博客样式如下</a>:</p><p><img src="https://p.130014.xyz/2021/03/10/1f185821cc0619172.png"></p><br><h3 id="3-同步Github-允许公共访问"><a href="#3-同步Github-允许公共访问" class="headerlink" title="3.同步Github,允许公共访问"></a>3.同步Github,允许公共访问</h3><p>初次安装git需要配置用户名和邮箱，否则git会提示：please tell me who you are.</p><p>你需要运行命令来配置你的用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;superGG1990&quot;</span><br><span class="line">$ git config --global user.email &quot;superGG1990@163.com&quot;</span><br></pre></td></tr></table></figure><p><strong>注意：（引号内请输入你自己设置的名字，和你自己的邮箱）</strong>此用户名和邮箱是git提交代码时用来显示你身份和联系方式的，并不是github用户名和邮箱</p><br><h3 id="4-git配置SSH-Key"><a href="#4-git配置SSH-Key" class="headerlink" title="4.git配置SSH Key"></a>4.git配置SSH Key</h3><br><p>1、 打开git bash.exe</p><br><p>2、检查是否已经有SSH Key </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><br><p>3、生成SSH Key </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>第一次生成的话，直接一路回车，不需要输入密码。不是第一次生成的话，会提示 overwrite (y/n)? 问你是否覆盖旧的 SSH Key ，直接填 y ，然后一直回车就行了，最后得到了两个文件：id_rsa和id_rsa.pub。</p><p> <img src="https://p.130014.xyz/2021/03/10/1c409e1977df2aefa.png"></p><p><br>4、记事本打开/C/Users/Administrator/.ssh/下id_rsa.pub文件，复制该段信息；登录github账户，点击头像进入Settings -&gt; SSH and GPG keys -&gt; New SSH key，将复制的信息粘贴到该处。</p><p><img src="https://p.130014.xyz/2021/03/10/1b1567ac30f54e377.png"></p><br><p>5、测试是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>提示“Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.”说明添加成功。</p><br><p>在本地我们已经搭建了博客，但是还只能自己本地访问。若要别人也能看到，那就需要我们将其同步部署到GitHub上了。首先找到我们的博客仓库，并拷贝仓库地址：</p><p><img src="https://p.130014.xyz/2021/03/10/15e547ecc5db46c70.png"></p><p>然后修改本地博客目录的配置：<br>修改本次博客根目录下的_config.yml文件，修改deploy下的配置如下：</p><p><img src="https://p.130014.xyz/2021/03/10/1182c2cfb4473fbf5.png"></p><p>之后执行控制台命令(cmd)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git &#x2F;&#x2F;安装部署插件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d &#x2F;&#x2F;部署到github</span><br></pre></td></tr></table></figure><p>再次访问链接：<a href="https://dreamcoffeezs.github.io/">https://userName.github.io</a>，就会发现这里的界面和本地的一样了。如此一来我们搭建的个人博客网站就基本完成了。</p><br><h2 id="三、发布博客"><a href="#三、发布博客" class="headerlink" title="三、发布博客"></a>三、发布博客</h2><p>可以发布自己的第一篇博客了。来尝试一下以下的步骤：<br>在本地博客文件夹根目录(git bash)输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我个人博客的第一篇博客&quot; </span><br><span class="line">hexo g &#x2F;&#x2F;生成网页 </span><br><span class="line">hexo d &#x2F;&#x2F;部署到远端(github)</span><br></pre></td></tr></table></figure><p><img src="https://p.130014.xyz/2021/03/10/1dadfec47347fda1f.png"></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo s &#x2F;&#x2F;启动本地服务器，用于预览</span><br><span class="line">hexo clean &#x2F;&#x2F;清理缓存 </span><br><span class="line">hexo g &#x2F;&#x2F;重新生成博客代码 </span><br><span class="line">hexo d &#x2F;&#x2F;部署到本地</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 写作介绍</span><br><span class="line">## 1，字体介绍</span><br><span class="line">*这是斜体* 或 _这也是斜体_ </span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br><span class="line">## 2，分级标题</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">## 3，超链接</span><br><span class="line">写法：</span><br><span class="line"></span><br><span class="line">## 4,列表</span><br><span class="line">无序列表：</span><br><span class="line">写法：</span><br><span class="line"></span><br><span class="line">* 无序列表项1</span><br><span class="line">+ 无序列表项2</span><br><span class="line">- 无序列表项3</span><br><span class="line"></span><br><span class="line">有序列表：</span><br><span class="line">写法：</span><br><span class="line">1.有序列表项1</span><br><span class="line">2.有序列表项2</span><br><span class="line">3.有序列表项3</span><br><span class="line"></span><br><span class="line">## 5，插入图片</span><br><span class="line">在 Hexo 中插入图片，首先需要将图片放在 source&#x2F;img&#x2F; 文件夹下，然后如下方式进行插入：</span><br><span class="line"></span><br><span class="line">![](url)</span><br><span class="line"></span><br><span class="line">## 6，表格</span><br><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br></pre></td></tr></table></figure><p><br><br></p><p>到此为止hexo博客的搭建已经基本完成，之后我会更新关于个人博客的页面美化教程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
